<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>Components/simpliciti/nwk_applications/nwk_ping.c Source File</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.4.7 -->
<div class="tabs">
  <ul>
    <li><a href="index.html"><span>Main&nbsp;Page</span></a></li>
    <li><a href="annotated.html"><span>Classes</span></a></li>
    <li id="current"><a href="files.html"><span>Files</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="files.html"><span>File&nbsp;List</span></a></li>
    <li><a href="globals.html"><span>File&nbsp;Members</span></a></li>
  </ul></div>
<h1>Components/simpliciti/nwk_applications/nwk_ping.c</h1><a href="nwk__ping_8c.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**************************************************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">  Filename:       nwk_ping.c</span>
<a name="l00003"></a>00003 <span class="comment">  Revised:        $Date: 2009-01-18 16:01:08 -0800 (Sun, 18 Jan 2009) $</span>
<a name="l00004"></a>00004 <span class="comment">  Revision:       $Revision: 18796 $</span>
<a name="l00005"></a>00005 <span class="comment">  Author:         $Author: lfriedman $</span>
<a name="l00006"></a>00006 <span class="comment"></span>
<a name="l00007"></a>00007 <span class="comment">  Description:    This file supports the SimpliciTI Ping network application.</span>
<a name="l00008"></a>00008 <span class="comment"></span>
<a name="l00009"></a>00009 <span class="comment">  Copyright 2007-2009 Texas Instruments Incorporated. All rights reserved.</span>
<a name="l00010"></a>00010 <span class="comment"></span>
<a name="l00011"></a>00011 <span class="comment">  IMPORTANT: Your use of this Software is limited to those specific rights granted under</span>
<a name="l00012"></a>00012 <span class="comment">  the terms of a software license agreement between the user who downloaded the software,</span>
<a name="l00013"></a>00013 <span class="comment">  his/her employer (which must be your employer) and Texas Instruments Incorporated (the</span>
<a name="l00014"></a>00014 <span class="comment">  "License"). You may not use this Software unless you agree to abide by the terms of the</span>
<a name="l00015"></a>00015 <span class="comment">  License. The License limits your use, and you acknowledge, that the Software may not be</span>
<a name="l00016"></a>00016 <span class="comment">  modified, copied or distributed unless embedded on a Texas Instruments microcontroller</span>
<a name="l00017"></a>00017 <span class="comment">  or used solely and exclusively in conjunction with a Texas Instruments radio frequency</span>
<a name="l00018"></a>00018 <span class="comment">  transceiver, which is integrated into your product. Other than for the foregoing purpose,</span>
<a name="l00019"></a>00019 <span class="comment">  you may not use, reproduce, copy, prepare derivative works of, modify, distribute,</span>
<a name="l00020"></a>00020 <span class="comment">  perform, display or sell this Software and/or its documentation for any purpose.</span>
<a name="l00021"></a>00021 <span class="comment"></span>
<a name="l00022"></a>00022 <span class="comment">  YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE PROVIDED “AS IS”</span>
<a name="l00023"></a>00023 <span class="comment">  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION, ANY</span>
<a name="l00024"></a>00024 <span class="comment">  WARRANTY OF MERCHANTABILITY, TITLE, NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE.</span>
<a name="l00025"></a>00025 <span class="comment">  IN NO EVENT SHALL TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,</span>
<a name="l00026"></a>00026 <span class="comment">  NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER LEGAL EQUITABLE</span>
<a name="l00027"></a>00027 <span class="comment">  THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES INCLUDING BUT NOT LIMITED TO ANY</span>
<a name="l00028"></a>00028 <span class="comment">  INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST</span>
<a name="l00029"></a>00029 <span class="comment">  DATA, COST OF PROCUREMENT OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY</span>
<a name="l00030"></a>00030 <span class="comment">  THIRD PARTIES (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.</span>
<a name="l00031"></a>00031 <span class="comment"></span>
<a name="l00032"></a>00032 <span class="comment">  Should you have any questions regarding your right to use this Software,</span>
<a name="l00033"></a>00033 <span class="comment">  contact Texas Instruments Incorporated at www.TI.com.</span>
<a name="l00034"></a>00034 <span class="comment">**************************************************************************************************/</span>
<a name="l00035"></a>00035 
<a name="l00036"></a>00036 
<a name="l00037"></a>00037 <span class="comment">/******************************************************************************</span>
<a name="l00038"></a>00038 <span class="comment"> * INCLUDES</span>
<a name="l00039"></a>00039 <span class="comment"> */</span>
<a name="l00040"></a>00040 <span class="preprocessor">#include &lt;string.h&gt;</span>
<a name="l00041"></a>00041 <span class="preprocessor">#include "<a class="code" href="bsp_8h.html">bsp.h</a>"</span>
<a name="l00042"></a>00042 <span class="preprocessor">#include "<a class="code" href="mrfi_8h.html">mrfi.h</a>"</span>
<a name="l00043"></a>00043 <span class="preprocessor">#include "<a class="code" href="nwk__types_8h.html">nwk_types.h</a>"</span>
<a name="l00044"></a>00044 <span class="preprocessor">#include "<a class="code" href="nwk__frame_8h.html">nwk_frame.h</a>"</span>
<a name="l00045"></a>00045 <span class="preprocessor">#include "<a class="code" href="nwk_8h.html">nwk.h</a>"</span>
<a name="l00046"></a>00046 <span class="preprocessor">#include "<a class="code" href="nwk__ping_8h.html">nwk_ping.h</a>"</span>
<a name="l00047"></a>00047 <span class="preprocessor">#include "<a class="code" href="nwk__globals_8h.html">nwk_globals.h</a>"</span>
<a name="l00048"></a>00048 <span class="preprocessor">#include "<a class="code" href="nwk__api_8h.html">nwk_api.h</a>"</span>
<a name="l00049"></a>00049 <span class="preprocessor">#include "<a class="code" href="nwk__freq_8h.html">nwk_freq.h</a>"</span>
<a name="l00050"></a>00050 <span class="preprocessor">#include "<a class="code" href="nwk__security_8h.html">nwk_security.h</a>"</span>
<a name="l00051"></a>00051 
<a name="l00052"></a>00052 <span class="comment">/******************************************************************************</span>
<a name="l00053"></a>00053 <span class="comment"> * MACROS</span>
<a name="l00054"></a>00054 <span class="comment"> */</span>
<a name="l00055"></a>00055 
<a name="l00056"></a>00056 <span class="comment">/******************************************************************************</span>
<a name="l00057"></a>00057 <span class="comment"> * CONSTANTS AND DEFINES</span>
<a name="l00058"></a>00058 <span class="comment"> */</span>
<a name="l00059"></a>00059 
<a name="l00060"></a>00060 <span class="comment">/******************************************************************************</span>
<a name="l00061"></a>00061 <span class="comment"> * TYPEDEFS</span>
<a name="l00062"></a>00062 <span class="comment"> */</span>
<a name="l00063"></a>00063 
<a name="l00064"></a>00064 <span class="comment">/******************************************************************************</span>
<a name="l00065"></a>00065 <span class="comment"> * LOCAL VARIABLES</span>
<a name="l00066"></a>00066 <span class="comment"> */</span>
<a name="l00067"></a>00067 
<a name="l00068"></a>00068 <span class="keyword">static</span> <span class="keyword">volatile</span> <a class="code" href="bsp__msp430__defs_8h.html#3ebf7c4fcbf17b618a01df30a79859d3">uint8_t</a> sTid = 0;
<a name="l00069"></a>00069 
<a name="l00070"></a>00070 <span class="comment">/******************************************************************************</span>
<a name="l00071"></a>00071 <span class="comment"> * LOCAL FUNCTIONS</span>
<a name="l00072"></a>00072 <span class="comment"> */</span>
<a name="l00073"></a>00073 <span class="keyword">static</span> <span class="keywordtype">void</span> smpl_send_ping_reply(<a class="code" href="structmrfiPacket__t.html">mrfiPacket_t</a> *);
<a name="l00074"></a>00074 <span class="keyword">static</span> <span class="keywordtype">void</span> handlePingRequest(<a class="code" href="structmrfiPacket__t.html">mrfiPacket_t</a> *);
<a name="l00075"></a>00075 
<a name="l00076"></a>00076 <span class="comment">/******************************************************************************</span>
<a name="l00077"></a>00077 <span class="comment"> * GLOBAL VARIABLES</span>
<a name="l00078"></a>00078 <span class="comment"> */</span>
<a name="l00079"></a>00079 
<a name="l00080"></a>00080 <span class="comment">/******************************************************************************</span>
<a name="l00081"></a>00081 <span class="comment"> * GLOBAL FUNCTIONS</span>
<a name="l00082"></a>00082 <span class="comment"> */</span>
<a name="l00083"></a>00083 
<a name="l00084"></a>00084 <span class="comment">/******************************************************************************</span>
<a name="l00085"></a>00085 <span class="comment"> * @fn          nwk_pingInit</span>
<a name="l00086"></a>00086 <span class="comment"> *</span>
<a name="l00087"></a>00087 <span class="comment"> * @brief       Initialize Ping application.</span>
<a name="l00088"></a>00088 <span class="comment"> *</span>
<a name="l00089"></a>00089 <span class="comment"> * input parameters</span>
<a name="l00090"></a>00090 <span class="comment"> *</span>
<a name="l00091"></a>00091 <span class="comment"> * output parameters</span>
<a name="l00092"></a>00092 <span class="comment"> *</span>
<a name="l00093"></a>00093 <span class="comment"> * @return   void</span>
<a name="l00094"></a>00094 <span class="comment"> */</span>
<a name="l00095"></a><a class="code" href="nwk__ping_8h.html#f6756a29cd7e8e9622dc7749d19553c1">00095</a> <span class="keywordtype">void</span> <a class="code" href="nwk__ping_8c.html#f6756a29cd7e8e9622dc7749d19553c1">nwk_pingInit</a>(<span class="keywordtype">void</span>)
<a name="l00096"></a>00096 {
<a name="l00097"></a>00097   sTid = <a class="code" href="mrfi_8h.html#aab3d4aa3768142bc0ee60f5f83931d1">MRFI_RandomByte</a>();
<a name="l00098"></a>00098 
<a name="l00099"></a>00099   <span class="keywordflow">return</span>;
<a name="l00100"></a>00100 }
<a name="l00101"></a>00101 
<a name="l00102"></a>00102 <span class="comment">/******************************************************************************</span>
<a name="l00103"></a>00103 <span class="comment"> * @fn          nwk_ping</span>
<a name="l00104"></a>00104 <span class="comment"> *</span>
<a name="l00105"></a>00105 <span class="comment"> * @brief       Called from the application level to ping a peer. A small</span>
<a name="l00106"></a>00106 <span class="comment"> *              payload is sent that includes a tid to detect correct reply.</span>
<a name="l00107"></a>00107 <span class="comment"> *              Caller does not supply payload.</span>
<a name="l00108"></a>00108 <span class="comment"> *</span>
<a name="l00109"></a>00109 <span class="comment"> * input parameters</span>
<a name="l00110"></a>00110 <span class="comment"> * @param   lid     - Link ID representing peer to ping</span>
<a name="l00111"></a>00111 <span class="comment"> *</span>
<a name="l00112"></a>00112 <span class="comment"> * output parameters</span>
<a name="l00113"></a>00113 <span class="comment"> *</span>
<a name="l00114"></a>00114 <span class="comment"> * @return   SMPL_SUCCESS   valid reply received</span>
<a name="l00115"></a>00115 <span class="comment"> *           SMPL_TIMEOUT   no valid reply received</span>
<a name="l00116"></a>00116 <span class="comment"> *           SMPL_NO_CHANNEL  no channels returned on a scan</span>
<a name="l00117"></a>00117 <span class="comment"> */</span>
<a name="l00118"></a><a class="code" href="nwk__ping_8h.html#9f357c433d60479eef4d66cf96d6f7eb">00118</a> <a class="code" href="nwk__types_8h.html#bc3335170bd809d2456c3764595bb41f">smplStatus_t</a> <a class="code" href="nwk__ping_8c.html#46031b66dec84939fac83f9130f2d7aa">nwk_ping</a>(<a class="code" href="nwk__types_8h.html#f8f720dc4ed059245ecf82cd256ffa54">linkID_t</a> lid)
<a name="l00119"></a>00119 {
<a name="l00120"></a>00120   <a class="code" href="structconnInfo__t.html">connInfo_t</a>  *pCInfo   = <a class="code" href="nwk_8c.html#3682eb43b9a650b6f914589125826b7b">nwk_getConnInfo</a>(lid);
<a name="l00121"></a>00121   <a class="code" href="nwk__types_8h.html#bc3335170bd809d2456c3764595bb41f">smplStatus_t</a> rc       = <a class="code" href="nwk__types_8h.html#e0b034bf9575c473b7fd4ba5daa0155eea44aa921af7d502aee7df35a86377b7">SMPL_BAD_PARAM</a>;
<a name="l00122"></a>00122   <a class="code" href="bsp__msp430__defs_8h.html#3ebf7c4fcbf17b618a01df30a79859d3">uint8_t</a>      done     = 0;
<a name="l00123"></a>00123   <a class="code" href="bsp__msp430__defs_8h.html#3ebf7c4fcbf17b618a01df30a79859d3">uint8_t</a>      repeatIt = 2;
<a name="l00124"></a>00124   <a class="code" href="bsp__msp430__defs_8h.html#3ebf7c4fcbf17b618a01df30a79859d3">uint8_t</a>      msg[<a class="code" href="nwk__ping_8h.html#6241ca2e3500b0b062e0a5da136f25d7">MAX_PING_APP_FRAME</a>];
<a name="l00125"></a>00125   <a class="code" href="bsp__msp430__defs_8h.html#3ebf7c4fcbf17b618a01df30a79859d3">uint8_t</a>      radioState = <a class="code" href="mrfi_8h.html#b3cd122ea368cc193f2900d1ebbcfbcc">MRFI_GetRadioState</a>();
<a name="l00126"></a>00126   <span class="keyword">union</span>
<a name="l00127"></a>00127 <span class="keyword">  </span>{
<a name="l00128"></a>00128     <a class="code" href="structioctlRawSend__t.html">ioctlRawSend_t</a>    send;
<a name="l00129"></a>00129     <a class="code" href="structioctlRawReceive__t.html">ioctlRawReceive_t</a> recv;
<a name="l00130"></a>00130   } ioctl_info;
<a name="l00131"></a>00131 
<a name="l00132"></a>00132   <span class="keywordflow">if</span> (!pCInfo || (<a class="code" href="nwk_8h.html#118268a7808649aacf235d5696a980ce">SMPL_LINKID_USER_UUD</a> == lid))
<a name="l00133"></a>00133   {
<a name="l00134"></a>00134     <span class="comment">/* either link ID bogus or tried to ping the unconnected user datagram link ID. */</span>
<a name="l00135"></a>00135     <span class="keywordflow">return</span> rc;
<a name="l00136"></a>00136   }
<a name="l00137"></a>00137 
<a name="l00138"></a>00138   <span class="keywordflow">do</span>
<a name="l00139"></a>00139   {
<a name="l00140"></a>00140 <span class="preprocessor">#if defined(FREQUENCY_AGILITY) &amp;&amp; !defined(ACCESS_POINT)</span>
<a name="l00141"></a>00141 <span class="preprocessor"></span>    <a class="code" href="bsp__msp430__defs_8h.html#3ebf7c4fcbf17b618a01df30a79859d3">uint8_t</a>     i, numChan;
<a name="l00142"></a>00142     <a class="code" href="structfreqEntry__t.html">freqEntry_t</a> channels[<a class="code" href="nwk__types_8h.html#a78d41db02d286d468b8b47e8a920434">NWK_FREQ_TBL_SIZE</a>];
<a name="l00143"></a>00143 
<a name="l00144"></a>00144     <span class="keywordflow">if</span> (repeatIt == 2)
<a name="l00145"></a>00145     {
<a name="l00146"></a>00146       <span class="comment">/* If FA enabled, first time through set up so that the 'for'</span>
<a name="l00147"></a>00147 <span class="comment">       * loop checks the current channel. This saves time (no scan)</span>
<a name="l00148"></a>00148 <span class="comment">       * and is very likely to succeed. Populate the proper strucure.</span>
<a name="l00149"></a>00149 <span class="comment">       */</span>
<a name="l00150"></a>00150       <a class="code" href="nwk__api_8c.html#065b0f6d38cc2b2bf2f74aff7805a58b">SMPL_Ioctl</a>(<a class="code" href="nwk__types_8h.html#a5bc45cc3d7aa3be43d8a279116522f5aa500f2c2a54c91ebf6f0acb8c6154c4">IOCTL_OBJ_FREQ</a>, <a class="code" href="nwk__types_8h.html#dce1d6e720abafed7028bb97ea0ebb706258e2a6a3778bccbd1385a24b009b1f">IOCTL_ACT_GET</a>, channels);
<a name="l00151"></a>00151       numChan = 1;
<a name="l00152"></a>00152     }
<a name="l00153"></a>00153     <span class="keywordflow">else</span>
<a name="l00154"></a>00154     {
<a name="l00155"></a>00155       <span class="comment">/* If we get here we must scan for the channel we're now on */</span>
<a name="l00156"></a>00156       <span class="keywordflow">if</span> (!(numChan=nwk_scanForChannels(channels)))
<a name="l00157"></a>00157       {
<a name="l00158"></a>00158         <span class="keywordflow">return</span> <a class="code" href="nwk__types_8h.html#e0b034bf9575c473b7fd4ba5daa0155ee851053a26794809f03b37632301f1dc">SMPL_NO_CHANNEL</a>;
<a name="l00159"></a>00159       }
<a name="l00160"></a>00160     }
<a name="l00161"></a>00161     <span class="comment">/* Either we scan next time through or we're done */</span>
<a name="l00162"></a>00162     repeatIt--;
<a name="l00163"></a>00163 
<a name="l00164"></a>00164     <span class="comment">/* this loop Pings on each channel (probably only 1) looking</span>
<a name="l00165"></a>00165 <span class="comment">     * for peer.</span>
<a name="l00166"></a>00166 <span class="comment">     */</span>
<a name="l00167"></a>00167     <span class="keywordflow">for</span> (i=0; i&lt;numChan &amp;&amp; !done; ++i)
<a name="l00168"></a>00168     {
<a name="l00169"></a>00169       nwk_setChannel(&amp;channels[i]);
<a name="l00170"></a>00170 <span class="preprocessor">#else</span>
<a name="l00171"></a>00171 <span class="preprocessor"></span>    {
<a name="l00172"></a>00172       repeatIt = 0;
<a name="l00173"></a>00173 <span class="preprocessor">#endif  </span><span class="comment">/* defined(FREQUENCY_AGILITY) &amp;&amp; !defined(ACCESS_POINT) */</span>
<a name="l00174"></a>00174 
<a name="l00175"></a>00175       ioctl_info.send.addr = (<a class="code" href="structaddr__t.html">addr_t</a> *)pCInfo-&gt;<a class="code" href="structconnInfo__t.html#6cde46f170fc0d98c18803d1819b0255">peerAddr</a>;
<a name="l00176"></a>00176       ioctl_info.send.msg  = msg;
<a name="l00177"></a>00177       ioctl_info.send.len  = <span class="keyword">sizeof</span>(msg);
<a name="l00178"></a>00178       ioctl_info.send.port = <a class="code" href="nwk_8h.html#2e5b42219a590730bef9126117fd8af9">SMPL_PORT_PING</a>;
<a name="l00179"></a>00179 
<a name="l00180"></a>00180       <span class="comment">/* fill in msg */</span>
<a name="l00181"></a>00181       msg[<a class="code" href="nwk__ping_8h.html#1d71223dc29e432d941a801e9c9bf9e5">PB_REQ_OS</a>] = <a class="code" href="nwk__ping_8h.html#90be2453655af7ac6d0aff5bd3ecf8e3">PING_REQ_PING</a>;
<a name="l00182"></a>00182       msg[<a class="code" href="nwk__ping_8h.html#df025546b081bd84860d3e4eec231ad6">PB_TID_OS</a>] = sTid;
<a name="l00183"></a>00183 
<a name="l00184"></a>00184       <a class="code" href="nwk__api_8c.html#065b0f6d38cc2b2bf2f74aff7805a58b">SMPL_Ioctl</a>(<a class="code" href="nwk__types_8h.html#a5bc45cc3d7aa3be43d8a279116522f52a6a80e649b7c8ad1175e8760b09692e">IOCTL_OBJ_RAW_IO</a>, <a class="code" href="nwk__types_8h.html#dce1d6e720abafed7028bb97ea0ebb702ebd36e484f0a86fee70a3989ea41b21">IOCTL_ACT_WRITE</a>, &amp;ioctl_info.send);
<a name="l00185"></a>00185 
<a name="l00186"></a>00186       ioctl_info.recv.port = <a class="code" href="nwk_8h.html#2e5b42219a590730bef9126117fd8af9">SMPL_PORT_PING</a>;
<a name="l00187"></a>00187       ioctl_info.recv.msg  = msg;
<a name="l00188"></a>00188       ioctl_info.recv.addr = 0;
<a name="l00189"></a>00189 
<a name="l00190"></a>00190       <a class="code" href="nwk__types_8h.html#a7801a3d753c047482620d9d406c07e5">NWK_CHECK_FOR_SETRX</a>(radioState);
<a name="l00191"></a>00191       <a class="code" href="nwk__types_8h.html#8c752c7e2828d3502045d80a2bfa9004">NWK_REPLY_DELAY</a>();
<a name="l00192"></a>00192       <a class="code" href="nwk__types_8h.html#5e18c8a07c804ab18dd8348195af1e10">NWK_CHECK_FOR_RESTORE_STATE</a>(radioState);
<a name="l00193"></a>00193 
<a name="l00194"></a>00194       <span class="keywordflow">if</span> (<a class="code" href="nwk__types_8h.html#e0b034bf9575c473b7fd4ba5daa0155e1587bead2fa0982ec696a5dd4458aa56">SMPL_SUCCESS</a> == <a class="code" href="nwk__api_8c.html#065b0f6d38cc2b2bf2f74aff7805a58b">SMPL_Ioctl</a>(IOCTL_OBJ_RAW_IO, <a class="code" href="nwk__types_8h.html#dce1d6e720abafed7028bb97ea0ebb70af31b3c45665297c3ae528279d60a048">IOCTL_ACT_READ</a>, &amp;ioctl_info.recv))
<a name="l00195"></a>00195       {
<a name="l00196"></a>00196         repeatIt = 0;
<a name="l00197"></a>00197         done     = 1;
<a name="l00198"></a>00198         sTid++;   <span class="comment">/* guard against duplicates */</span>
<a name="l00199"></a>00199       }
<a name="l00200"></a>00200     }
<a name="l00201"></a>00201   } <span class="keywordflow">while</span> (repeatIt);
<a name="l00202"></a>00202 
<a name="l00203"></a>00203   <span class="keywordflow">return</span> done ? <a class="code" href="nwk__types_8h.html#e0b034bf9575c473b7fd4ba5daa0155e1587bead2fa0982ec696a5dd4458aa56">SMPL_SUCCESS</a> : <a class="code" href="nwk__types_8h.html#e0b034bf9575c473b7fd4ba5daa0155e70573914d36e96ff435bd7a5b03f8626">SMPL_TIMEOUT</a>;
<a name="l00204"></a>00204 
<a name="l00205"></a>00205 }
<a name="l00206"></a>00206 
<a name="l00207"></a>00207 <span class="comment">/******************************************************************************</span>
<a name="l00208"></a>00208 <span class="comment"> * @fn          smpl_send_ping_reply</span>
<a name="l00209"></a>00209 <span class="comment"> *</span>
<a name="l00210"></a>00210 <span class="comment"> * @brief       Send a reply to a ping request.</span>
<a name="l00211"></a>00211 <span class="comment"> *</span>
<a name="l00212"></a>00212 <span class="comment"> * input parameters</span>
<a name="l00213"></a>00213 <span class="comment"> * @param   frame     - pointer to frame containing request</span>
<a name="l00214"></a>00214 <span class="comment"> *</span>
<a name="l00215"></a>00215 <span class="comment"> * output parameters</span>
<a name="l00216"></a>00216 <span class="comment"> *</span>
<a name="l00217"></a>00217 <span class="comment"> * @return   void</span>
<a name="l00218"></a>00218 <span class="comment"> */</span>
<a name="l00219"></a>00219 <span class="keyword">static</span> <span class="keywordtype">void</span> smpl_send_ping_reply(<a class="code" href="structmrfiPacket__t.html">mrfiPacket_t</a> *frame)
<a name="l00220"></a>00220 {
<a name="l00221"></a>00221   <a class="code" href="structframeInfo__t.html">frameInfo_t</a> *pOutFrame;
<a name="l00222"></a>00222 
<a name="l00223"></a>00223   <span class="comment">/* Build the reply frame. The application payload is the one included in the</span>
<a name="l00224"></a>00224 <span class="comment">   * received frame payload.</span>
<a name="l00225"></a>00225 <span class="comment">   */</span>
<a name="l00226"></a>00226   <span class="keywordflow">if</span> (pOutFrame = <a class="code" href="nwk__frame_8c.html#10dcb91cdb785c086e0b09e43bbf0281">nwk_buildFrame</a>(<a class="code" href="nwk_8h.html#2e5b42219a590730bef9126117fd8af9">SMPL_PORT_PING</a>, <a class="code" href="mrfi_8h.html#25027148ad597e40fc1ba229a0071ef1">MRFI_P_PAYLOAD</a>(frame)+<a class="code" href="nwk__frame_8h.html#34df662d21a692ce53efcfd9246d4b51">F_APP_PAYLOAD_OS</a>, <a class="code" href="mrfi_8h.html#f1d8588ef24d96feabfe95b3a8b61533">MRFI_GET_PAYLOAD_LEN</a>(frame)-<a class="code" href="nwk__frame_8h.html#34df662d21a692ce53efcfd9246d4b51">F_APP_PAYLOAD_OS</a>, <a class="code" href="nwk_8c.html#7c294406bc0bfbcd9cf2171717878f9e">MAX_HOPS</a>))
<a name="l00227"></a>00227   {
<a name="l00228"></a>00228     <span class="comment">/* destination address is the source adddress of the received frame. */</span>
<a name="l00229"></a>00229     memcpy(<a class="code" href="mrfi_8h.html#4c6ccf692a5a03b1614af28106157a05">MRFI_P_DST_ADDR</a>(&amp;pOutFrame-&gt;<a class="code" href="structframeInfo__t.html#761ae14e3588ca7ecbb6fec0c14b9673">mrfiPkt</a>), <a class="code" href="mrfi_8h.html#04a3d1a3cba294e50df7148f18c99442">MRFI_P_SRC_ADDR</a>(frame), <a class="code" href="nwk__types_8h.html#e02a66bd1cfdc9b099bcea9b29704a66">NET_ADDR_SIZE</a>);
<a name="l00230"></a>00230 
<a name="l00231"></a>00231     <span class="comment">/* turn on the reply bit in the application payload */</span>
<a name="l00232"></a>00232     *(<a class="code" href="mrfi_8h.html#25027148ad597e40fc1ba229a0071ef1">MRFI_P_PAYLOAD</a>(&amp;pOutFrame-&gt;<a class="code" href="structframeInfo__t.html#761ae14e3588ca7ecbb6fec0c14b9673">mrfiPkt</a>)+<a class="code" href="nwk__frame_8h.html#34df662d21a692ce53efcfd9246d4b51">F_APP_PAYLOAD_OS</a>+<a class="code" href="nwk__ping_8h.html#1d71223dc29e432d941a801e9c9bf9e5">PB_REQ_OS</a>) |= <a class="code" href="nwk__types_8h.html#a21184e99ec4ed974d566f514f3d69f1">NWK_APP_REPLY_BIT</a>;
<a name="l00233"></a>00233 <span class="preprocessor">#ifdef SMPL_SECURE</span>
<a name="l00234"></a>00234 <span class="preprocessor"></span>    <a class="code" href="nwk__security_8h.html#f124cfec802c86dd5d7e6360c1caefe8">nwk_setSecureFrame</a>(&amp;pOutFrame-&gt;<a class="code" href="structframeInfo__t.html#761ae14e3588ca7ecbb6fec0c14b9673">mrfiPkt</a>, <a class="code" href="mrfi_8h.html#f1d8588ef24d96feabfe95b3a8b61533">MRFI_GET_PAYLOAD_LEN</a>(frame)-<a class="code" href="nwk__frame_8h.html#34df662d21a692ce53efcfd9246d4b51">F_APP_PAYLOAD_OS</a>, 0);
<a name="l00235"></a>00235 <span class="preprocessor">#endif  </span><span class="comment">/* SMPL_SECURE */</span>
<a name="l00236"></a>00236     <a class="code" href="nwk__frame_8c.html#d3b2907dd4eb2703595235745c91b705">nwk_sendFrame</a>(pOutFrame, <a class="code" href="mrfi_8h.html#94092a14d21b0c59c28b960318f8127b">MRFI_TX_TYPE_FORCED</a>);
<a name="l00237"></a>00237   }
<a name="l00238"></a>00238 }
<a name="l00239"></a>00239 
<a name="l00240"></a>00240 <span class="comment">/******************************************************************************</span>
<a name="l00241"></a>00241 <span class="comment"> * @fn          nwk_processPing</span>
<a name="l00242"></a>00242 <span class="comment"> *</span>
<a name="l00243"></a>00243 <span class="comment"> * @brief       Ping network application frame handler.</span>
<a name="l00244"></a>00244 <span class="comment"> *</span>
<a name="l00245"></a>00245 <span class="comment"> * input parameters</span>
<a name="l00246"></a>00246 <span class="comment"> * @param   frame   - pointer to frame in question</span>
<a name="l00247"></a>00247 <span class="comment"> *</span>
<a name="l00248"></a>00248 <span class="comment"> * output parameters</span>
<a name="l00249"></a>00249 <span class="comment"> *</span>
<a name="l00250"></a>00250 <span class="comment"> * @return    Keep frame for application, release frame, or replay frame.</span>
<a name="l00251"></a>00251 <span class="comment"> */</span>
<a name="l00252"></a><a class="code" href="nwk__ping_8h.html#7ba09811f8d59d2191f4435c29e8686a">00252</a> <a class="code" href="nwk__types_8h.html#85949999f43cec8c39e00538807405f0">fhStatus_t</a> <a class="code" href="nwk__ping_8c.html#cea6e6edef6645301c5c7473464145fd">nwk_processPing</a>(<a class="code" href="structmrfiPacket__t.html">mrfiPacket_t</a> *frame)
<a name="l00253"></a>00253 {
<a name="l00254"></a>00254   <a class="code" href="nwk__types_8h.html#85949999f43cec8c39e00538807405f0">fhStatus_t</a>   rc;
<a name="l00255"></a>00255   <a class="code" href="bsp__msp430__defs_8h.html#3ebf7c4fcbf17b618a01df30a79859d3">uint8_t</a>      replyType;
<a name="l00256"></a>00256 
<a name="l00257"></a>00257   <span class="comment">/* If we sent this then this is the reply. Validate the</span>
<a name="l00258"></a>00258 <span class="comment">   * packet for reception by client app. If we didn't send</span>
<a name="l00259"></a>00259 <span class="comment">   * it then we are the target. Send the reply.</span>
<a name="l00260"></a>00260 <span class="comment">   */</span>
<a name="l00261"></a>00261   replyType = <a class="code" href="nwk_8c.html#87a6ddaa99e2ac80dece7c8383324c0c">nwk_isValidReply</a>(frame, sTid, <a class="code" href="nwk__ping_8h.html#1d71223dc29e432d941a801e9c9bf9e5">PB_REQ_OS</a>, <a class="code" href="nwk__ping_8h.html#df025546b081bd84860d3e4eec231ad6">PB_TID_OS</a>);
<a name="l00262"></a>00262   <span class="keywordflow">if</span> (<a class="code" href="nwk_8h.html#08172b5eebf24ff77efd7b64a60316dc">SMPL_MY_REPLY</a> == replyType)
<a name="l00263"></a>00263   {
<a name="l00264"></a>00264     <span class="comment">/* It's a match and it's a reply. Validate the received packet by</span>
<a name="l00265"></a>00265 <span class="comment">     * returning a 1 so it can be received by the client app.</span>
<a name="l00266"></a>00266 <span class="comment">     */</span>
<a name="l00267"></a>00267     <a class="code" href="mrfi_8h.html#7a7d32a89b4010523201000faa837fd0">MRFI_PostKillSem</a>();
<a name="l00268"></a>00268     rc = <a class="code" href="nwk__types_8h.html#239f22220479dc250e23d722510ec3a22368f352fcccf9f3527403cbdd4ffbc2">FHS_KEEP</a>;
<a name="l00269"></a>00269   }
<a name="l00270"></a>00270 <span class="preprocessor">#if !defined( END_DEVICE )</span>
<a name="l00271"></a>00271 <span class="preprocessor"></span>  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="nwk_8h.html#7866d77b7d27338c510636fbc087b802">SMPL_A_REPLY</a> == replyType)
<a name="l00272"></a>00272   {
<a name="l00273"></a>00273     <span class="comment">/* no match. If I'm not an ED this is a reply that should be passed on. */</span>
<a name="l00274"></a>00274     rc = <a class="code" href="nwk__types_8h.html#239f22220479dc250e23d722510ec3a22cbdb927d9e992823d388a4bed4b06cd">FHS_REPLAY</a>;
<a name="l00275"></a>00275   }
<a name="l00276"></a>00276 <span class="preprocessor">#endif  </span><span class="comment">/* !END_DEVICE */</span>
<a name="l00277"></a>00277   <span class="keywordflow">else</span>
<a name="l00278"></a>00278   {
<a name="l00279"></a>00279     <span class="comment">/* No, we didn't send it. Send reply assuming it's a Ping intended for us. */</span>
<a name="l00280"></a>00280     handlePingRequest(frame);
<a name="l00281"></a>00281 
<a name="l00282"></a>00282     rc = <a class="code" href="nwk__types_8h.html#239f22220479dc250e23d722510ec3a22aa8469bdacbb9118cc4b8dcb7d6b496">FHS_RELEASE</a>;
<a name="l00283"></a>00283   }
<a name="l00284"></a>00284 
<a name="l00285"></a>00285   <span class="keywordflow">return</span> rc;
<a name="l00286"></a>00286 }
<a name="l00287"></a>00287 
<a name="l00288"></a>00288 <span class="comment">/******************************************************************************</span>
<a name="l00289"></a>00289 <span class="comment"> * @fn          handlePingRequest</span>
<a name="l00290"></a>00290 <span class="comment"> *</span>
<a name="l00291"></a>00291 <span class="comment"> * @brief       Dispatches handler for specfic Ping request</span>
<a name="l00292"></a>00292 <span class="comment"> *</span>
<a name="l00293"></a>00293 <span class="comment"> * input parameters</span>
<a name="l00294"></a>00294 <span class="comment"> *</span>
<a name="l00295"></a>00295 <span class="comment"> * @param   frame - Ping frame received</span>
<a name="l00296"></a>00296 <span class="comment"> *</span>
<a name="l00297"></a>00297 <span class="comment"> * output parameters</span>
<a name="l00298"></a>00298 <span class="comment"> *</span>
<a name="l00299"></a>00299 <span class="comment"> * @return   void</span>
<a name="l00300"></a>00300 <span class="comment"> */</span>
<a name="l00301"></a>00301 <span class="keyword">static</span> <span class="keywordtype">void</span> handlePingRequest(<a class="code" href="structmrfiPacket__t.html">mrfiPacket_t</a> *frame)
<a name="l00302"></a>00302 {
<a name="l00303"></a>00303   <span class="keywordflow">switch</span> (*(<a class="code" href="mrfi_8h.html#25027148ad597e40fc1ba229a0071ef1">MRFI_P_PAYLOAD</a>(frame)+<a class="code" href="nwk__frame_8h.html#34df662d21a692ce53efcfd9246d4b51">F_APP_PAYLOAD_OS</a>))
<a name="l00304"></a>00304   {
<a name="l00305"></a>00305     <span class="keywordflow">case</span> <a class="code" href="nwk__ping_8h.html#90be2453655af7ac6d0aff5bd3ecf8e3">PING_REQ_PING</a>:
<a name="l00306"></a>00306       smpl_send_ping_reply(frame);
<a name="l00307"></a>00307       <span class="keywordflow">break</span>;
<a name="l00308"></a>00308 
<a name="l00309"></a>00309     <span class="keywordflow">default</span>:
<a name="l00310"></a>00310       <span class="keywordflow">break</span>;
<a name="l00311"></a>00311   }
<a name="l00312"></a>00312 
<a name="l00313"></a>00313   <span class="keywordflow">return</span>;
<a name="l00314"></a>00314 }
</pre></div><hr size="1"><address style="align: right;"><small>Generated on Thu Mar 29 11:40:06 2012 by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.4.7 </small></address>
</body>
</html>
