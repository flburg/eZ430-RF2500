<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>Components/simpliciti/nwk/nwk_api.c Source File</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.4.7 -->
<div class="tabs">
  <ul>
    <li><a href="index.html"><span>Main&nbsp;Page</span></a></li>
    <li><a href="annotated.html"><span>Classes</span></a></li>
    <li id="current"><a href="files.html"><span>Files</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="files.html"><span>File&nbsp;List</span></a></li>
    <li><a href="globals.html"><span>File&nbsp;Members</span></a></li>
  </ul></div>
<h1>Components/simpliciti/nwk/nwk_api.c</h1><a href="nwk__api_8c.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**************************************************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">  Filename:       nwk_api.c</span>
<a name="l00003"></a>00003 <span class="comment">  Revised:        $Date: 2009-01-28 18:27:38 -0800 (Wed, 28 Jan 2009) $</span>
<a name="l00004"></a>00004 <span class="comment">  Revision:       $Revision: 18875 $</span>
<a name="l00005"></a>00005 <span class="comment">  Author:         $Author: lfriedman $</span>
<a name="l00006"></a>00006 <span class="comment"></span>
<a name="l00007"></a>00007 <span class="comment">  Description:    This file supports the SimpliciTI appliction layer API.</span>
<a name="l00008"></a>00008 <span class="comment"></span>
<a name="l00009"></a>00009 <span class="comment">  Copyright 2007-2009 Texas Instruments Incorporated. All rights reserved.</span>
<a name="l00010"></a>00010 <span class="comment"></span>
<a name="l00011"></a>00011 <span class="comment">  IMPORTANT: Your use of this Software is limited to those specific rights granted under</span>
<a name="l00012"></a>00012 <span class="comment">  the terms of a software license agreement between the user who downloaded the software,</span>
<a name="l00013"></a>00013 <span class="comment">  his/her employer (which must be your employer) and Texas Instruments Incorporated (the</span>
<a name="l00014"></a>00014 <span class="comment">  "License"). You may not use this Software unless you agree to abide by the terms of the</span>
<a name="l00015"></a>00015 <span class="comment">  License. The License limits your use, and you acknowledge, that the Software may not be</span>
<a name="l00016"></a>00016 <span class="comment">  modified, copied or distributed unless embedded on a Texas Instruments microcontroller</span>
<a name="l00017"></a>00017 <span class="comment">  or used solely and exclusively in conjunction with a Texas Instruments radio frequency</span>
<a name="l00018"></a>00018 <span class="comment">  transceiver, which is integrated into your product. Other than for the foregoing purpose,</span>
<a name="l00019"></a>00019 <span class="comment">  you may not use, reproduce, copy, prepare derivative works of, modify, distribute,</span>
<a name="l00020"></a>00020 <span class="comment">  perform, display or sell this Software and/or its documentation for any purpose.</span>
<a name="l00021"></a>00021 <span class="comment"></span>
<a name="l00022"></a>00022 <span class="comment">  YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE PROVIDED “AS IS”</span>
<a name="l00023"></a>00023 <span class="comment">  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION, ANY</span>
<a name="l00024"></a>00024 <span class="comment">  WARRANTY OF MERCHANTABILITY, TITLE, NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE.</span>
<a name="l00025"></a>00025 <span class="comment">  IN NO EVENT SHALL TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,</span>
<a name="l00026"></a>00026 <span class="comment">  NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER LEGAL EQUITABLE</span>
<a name="l00027"></a>00027 <span class="comment">  THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES INCLUDING BUT NOT LIMITED TO ANY</span>
<a name="l00028"></a>00028 <span class="comment">  INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST</span>
<a name="l00029"></a>00029 <span class="comment">  DATA, COST OF PROCUREMENT OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY</span>
<a name="l00030"></a>00030 <span class="comment">  THIRD PARTIES (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.</span>
<a name="l00031"></a>00031 <span class="comment"></span>
<a name="l00032"></a>00032 <span class="comment">  Should you have any questions regarding your right to use this Software,</span>
<a name="l00033"></a>00033 <span class="comment">  contact Texas Instruments Incorporated at www.TI.com.</span>
<a name="l00034"></a>00034 <span class="comment">**************************************************************************************************/</span>
<a name="l00035"></a>00035 
<a name="l00036"></a>00036 <span class="comment">/******************************************************************************</span>
<a name="l00037"></a>00037 <span class="comment"> * INCLUDES</span>
<a name="l00038"></a>00038 <span class="comment"> */</span>
<a name="l00039"></a>00039 
<a name="l00040"></a>00040 <span class="preprocessor">#include &lt;string.h&gt;</span>
<a name="l00041"></a>00041 <span class="preprocessor">#include "<a class="code" href="bsp_8h.html">bsp.h</a>"</span>
<a name="l00042"></a>00042 <span class="preprocessor">#include "<a class="code" href="mrfi_8h.html">mrfi.h</a>"</span>
<a name="l00043"></a>00043 <span class="preprocessor">#include "<a class="code" href="nwk__types_8h.html">nwk_types.h</a>"</span>
<a name="l00044"></a>00044 <span class="preprocessor">#include "<a class="code" href="nwk__api_8h.html">nwk_api.h</a>"</span>
<a name="l00045"></a>00045 <span class="preprocessor">#include "<a class="code" href="nwk__frame_8h.html">nwk_frame.h</a>"</span>
<a name="l00046"></a>00046 <span class="preprocessor">#include "<a class="code" href="nwk_8h.html">nwk.h</a>"</span>
<a name="l00047"></a>00047 <span class="preprocessor">#include "<a class="code" href="nwk__app_8h.html">nwk_app.h</a>"</span>
<a name="l00048"></a>00048 <span class="preprocessor">#include "<a class="code" href="mrfi_8h.html">mrfi.h</a>"</span>
<a name="l00049"></a>00049 <span class="preprocessor">#include "<a class="code" href="nwk__globals_8h.html">nwk_globals.h</a>"</span>
<a name="l00050"></a>00050 <span class="preprocessor">#include "<a class="code" href="nwk__freq_8h.html">nwk_freq.h</a>"</span>
<a name="l00051"></a>00051 
<a name="l00052"></a>00052 <span class="comment">/******************************************************************************</span>
<a name="l00053"></a>00053 <span class="comment"> * MACROS</span>
<a name="l00054"></a>00054 <span class="comment"> */</span>
<a name="l00055"></a>00055 
<a name="l00056"></a>00056 <span class="comment">/******************************************************************************</span>
<a name="l00057"></a>00057 <span class="comment"> * CONSTANTS AND DEFINES</span>
<a name="l00058"></a>00058 <span class="comment"> */</span>
<a name="l00059"></a>00059 
<a name="l00060"></a>00060 <span class="comment">/* These defines are in support an application listening for a link frame to</span>
<a name="l00061"></a>00061 <span class="comment"> * terminate after some amount of time. The intention is that this guard be</span>
<a name="l00062"></a>00062 <span class="comment"> * the exception. The intention of the SimpliciTI design is that the</span>
<a name="l00063"></a>00063 <span class="comment"> * temporal contiguity between the listen and the reception of the link frame</span>
<a name="l00064"></a>00064 <span class="comment"> * from the peer be very tight. The SMPL_LinkListen() should be termninated</span>
<a name="l00065"></a>00065 <span class="comment"> * by the reception of the link frame. But in case it does not receive the frame</span>
<a name="l00066"></a>00066 <span class="comment"> * the support below allows intervention by the application.</span>
<a name="l00067"></a>00067 <span class="comment"> */</span>
<a name="l00068"></a>00068 
<a name="l00069"></a>00069 <span class="comment">/* The intention is for user to modify just the following single value */</span>
<a name="l00070"></a><a class="code" href="nwk__api_8c.html#3ae024771dbb6798ec373230e9924f68">00070</a> <span class="preprocessor">#define LINKLISTEN_MILLISECONDS_2_WAIT    (5000)</span>
<a name="l00071"></a>00071 <span class="preprocessor"></span>
<a name="l00072"></a><a class="code" href="nwk__api_8c.html#8bb45c9c671172a10089033f4972a522">00072</a> <span class="preprocessor">#define LINKLISTEN_POLL_PERIOD_MS         (10)</span>
<a name="l00073"></a><a class="code" href="nwk__api_8c.html#ba15cc1e5d054e1e19c7bd2f7a43b947">00073</a> <span class="preprocessor"></span><span class="preprocessor">#define LINKLISTEN_POLL_COUNT             ( (LINKLISTEN_MILLISECONDS_2_WAIT) / (LINKLISTEN_POLL_PERIOD_MS) )</span>
<a name="l00074"></a>00074 <span class="preprocessor"></span>
<a name="l00075"></a>00075 <span class="comment">/******************************************************************************</span>
<a name="l00076"></a>00076 <span class="comment"> * TYPEDEFS</span>
<a name="l00077"></a>00077 <span class="comment"> */</span>
<a name="l00078"></a>00078 
<a name="l00079"></a>00079 <span class="comment">/******************************************************************************</span>
<a name="l00080"></a>00080 <span class="comment"> * LOCAL VARIABLES</span>
<a name="l00081"></a>00081 <span class="comment"> */</span>
<a name="l00082"></a>00082 <span class="keyword">static</span> <a class="code" href="bsp__msp430__defs_8h.html#3ebf7c4fcbf17b618a01df30a79859d3">uint8_t</a> sInit_done = 0;
<a name="l00083"></a>00083 
<a name="l00084"></a>00084 <span class="comment">/******************************************************************************</span>
<a name="l00085"></a>00085 <span class="comment"> * LOCAL FUNCTIONS</span>
<a name="l00086"></a>00086 <span class="comment"> */</span>
<a name="l00087"></a>00087 <span class="keyword">static</span> <a class="code" href="bsp__msp430__defs_8h.html#3ebf7c4fcbf17b618a01df30a79859d3">uint8_t</a> ioctlPreInitAccessIsOK(<a class="code" href="nwk__types_8h.html#7e7507b5a72d3c7d7980006706258c70">ioctlObject_t</a>);
<a name="l00088"></a>00088 
<a name="l00089"></a>00089 <span class="comment">/******************************************************************************</span>
<a name="l00090"></a>00090 <span class="comment"> * GLOBAL VARIABLES</span>
<a name="l00091"></a>00091 <span class="comment"> */</span>
<a name="l00092"></a>00092 
<a name="l00093"></a>00093 <span class="comment">/******************************************************************************</span>
<a name="l00094"></a>00094 <span class="comment"> * GLOBAL FUNCTIONS</span>
<a name="l00095"></a>00095 <span class="comment"> */</span>
<a name="l00096"></a>00096 
<a name="l00097"></a>00097 <span class="comment">/***********************************************************************************</span>
<a name="l00098"></a>00098 <span class="comment"> * @fn          SMPL_Init</span>
<a name="l00099"></a>00099 <span class="comment"> *</span>
<a name="l00100"></a>00100 <span class="comment"> * @brief       Initialize the SimpliciTI stack.</span>
<a name="l00101"></a>00101 <span class="comment"> *</span>
<a name="l00102"></a>00102 <span class="comment"> * input parameters</span>
<a name="l00103"></a>00103 <span class="comment"> * @param   f  - Pointer to call back function. Function called by NWK when</span>
<a name="l00104"></a>00104 <span class="comment"> *               user application frame received. The callback is done in the</span>
<a name="l00105"></a>00105 <span class="comment"> *               ISR thread. Argument is Link ID associated with frame. Function</span>
<a name="l00106"></a>00106 <span class="comment"> *               returns 0 if frame is to be kept by NWK, otherwise 1. Frame</span>
<a name="l00107"></a>00107 <span class="comment"> *               should be kept if application will do a SMPL_Receive() in the</span>
<a name="l00108"></a>00108 <span class="comment"> *               user thread (recommended). Pointer may be NULL.</span>
<a name="l00109"></a>00109 <span class="comment"> *</span>
<a name="l00110"></a>00110 <span class="comment"> * output parameters</span>
<a name="l00111"></a>00111 <span class="comment"> *</span>
<a name="l00112"></a>00112 <span class="comment"> * @return   Status of operation:</span>
<a name="l00113"></a>00113 <span class="comment"> *             SMPL_SUCCESS</span>
<a name="l00114"></a>00114 <span class="comment"> *             SMPL_NO_JOIN     No Join reply. AP possibly not yet up.</span>
<a name="l00115"></a>00115 <span class="comment"> *             SMPL_NO_CHANNEL  Only if Frequency Agility enabled. Channel scan</span>
<a name="l00116"></a>00116 <span class="comment"> *                              failed. AP possibly not yet up.</span>
<a name="l00117"></a>00117 <span class="comment"> */</span>
<a name="l00118"></a><a class="code" href="nwk__api_8h.html#aa71127d97522da9d8ff5286e1bfeafd">00118</a> <a class="code" href="nwk__types_8h.html#bc3335170bd809d2456c3764595bb41f">smplStatus_t</a> <a class="code" href="nwk__api_8c.html#54a2192999eb505b627f4605ee2be38f">SMPL_Init</a>(<a class="code" href="bsp__msp430__defs_8h.html#3ebf7c4fcbf17b618a01df30a79859d3">uint8_t</a> (*f)(<a class="code" href="nwk__types_8h.html#f8f720dc4ed059245ecf82cd256ffa54">linkID_t</a>))
<a name="l00119"></a>00119 {
<a name="l00120"></a>00120   <a class="code" href="nwk__types_8h.html#bc3335170bd809d2456c3764595bb41f">smplStatus_t</a> rc;
<a name="l00121"></a>00121 
<a name="l00122"></a>00122   <span class="keywordflow">if</span> (!sInit_done)
<a name="l00123"></a>00123   {
<a name="l00124"></a>00124     <span class="comment">/* set up radio. */</span>
<a name="l00125"></a>00125     <a class="code" href="mrfi_8h.html#2dbfe650f2f707633feb4f1c6268d1d5">MRFI_Init</a>();
<a name="l00126"></a>00126 
<a name="l00127"></a>00127     <span class="comment">/* initialize network */</span>
<a name="l00128"></a>00128     <span class="keywordflow">if</span> ((rc=<a class="code" href="nwk_8c.html#2b12c4745be3673419a71fe82a1dac5f">nwk_nwkInit</a>(f)) != <a class="code" href="nwk__types_8h.html#e0b034bf9575c473b7fd4ba5daa0155e1587bead2fa0982ec696a5dd4458aa56">SMPL_SUCCESS</a>)
<a name="l00129"></a>00129     {
<a name="l00130"></a>00130       <span class="keywordflow">return</span> rc;
<a name="l00131"></a>00131     }
<a name="l00132"></a>00132 
<a name="l00133"></a>00133     <a class="code" href="mrfi_8h.html#1182d651fc4deb6d00d6e4b6cf6ab2ea">MRFI_WakeUp</a>();
<a name="l00134"></a>00134 <span class="preprocessor">#if defined( FREQUENCY_AGILITY )</span>
<a name="l00135"></a>00135 <span class="preprocessor"></span>    {
<a name="l00136"></a>00136       <a class="code" href="structfreqEntry__t.html">freqEntry_t</a> chan;
<a name="l00137"></a>00137 
<a name="l00138"></a>00138       chan.<a class="code" href="structfreqEntry__t.html#7c1a4ee72d258639e21e7ea6a139f7ad">logicalChan</a> = 0;
<a name="l00139"></a>00139       <span class="comment">/* ok to set default channel explicitly now that MRFI initialized. */</span>
<a name="l00140"></a>00140       nwk_setChannel(&amp;chan);
<a name="l00141"></a>00141     }
<a name="l00142"></a>00142 <span class="preprocessor">#endif</span>
<a name="l00143"></a>00143 <span class="preprocessor"></span>    <span class="comment">/* don't turn Rx on if we're an end device that isn't always on. */</span>
<a name="l00144"></a>00144 <span class="preprocessor">#if !defined( END_DEVICE )</span>
<a name="l00145"></a>00145 <span class="preprocessor"></span>    <a class="code" href="mrfi_8h.html#001dcf041ae1874ca47cbff5454a376d">MRFI_RxOn</a>();
<a name="l00146"></a>00146 <span class="preprocessor">#endif</span>
<a name="l00147"></a>00147 <span class="preprocessor"></span>
<a name="l00148"></a>00148 <span class="preprocessor">#if defined( END_DEVICE )</span>
<a name="l00149"></a>00149 <span class="preprocessor"></span>    <span class="comment">/* All except End Devices are in promiscuous mode */</span>
<a name="l00150"></a>00150     <a class="code" href="mrfi_8h.html#411014c3a07cdf04fad6de2dcefddc1a">MRFI_SetRxAddrFilter</a>((<a class="code" href="bsp__msp430__defs_8h.html#3ebf7c4fcbf17b618a01df30a79859d3">uint8_t</a> *)<a class="code" href="nwk__globals_8c.html#ba3bdc840ef7acd57d2ef0a25be3bf1a">nwk_getMyAddress</a>());
<a name="l00151"></a>00151     <a class="code" href="mrfi_8h.html#eeb3414d3931ac77afaa8e9d93c71f7e">MRFI_EnableRxAddrFilter</a>();
<a name="l00152"></a>00152 <span class="preprocessor">#endif</span>
<a name="l00153"></a>00153 <span class="preprocessor"></span>  }
<a name="l00154"></a>00154   sInit_done = 1;
<a name="l00155"></a>00155 
<a name="l00156"></a>00156   <span class="comment">/* Join. if no AP or Join fails that status is returned. */</span>
<a name="l00157"></a>00157   rc = <a class="code" href="nwk__join_8c.html#15f5c988a519c58b8930c24694f579bf">nwk_join</a>();
<a name="l00158"></a>00158 
<a name="l00159"></a>00159   <span class="keywordflow">return</span> rc;
<a name="l00160"></a>00160 }
<a name="l00161"></a>00161 
<a name="l00162"></a>00162 <span class="comment">/******************************************************************************</span>
<a name="l00163"></a>00163 <span class="comment"> * @fn          SMPL_LinkListen</span>
<a name="l00164"></a>00164 <span class="comment"> *</span>
<a name="l00165"></a>00165 <span class="comment"> * @brief       Listen for a link frame from a 'client' device.</span>
<a name="l00166"></a>00166 <span class="comment"> *</span>
<a name="l00167"></a>00167 <span class="comment"> * input parameters</span>
<a name="l00168"></a>00168 <span class="comment"> *</span>
<a name="l00169"></a>00169 <span class="comment"> * output parameters</span>
<a name="l00170"></a>00170 <span class="comment"> * @param   linkID     - pointer to Link ID to be used by application to</span>
<a name="l00171"></a>00171 <span class="comment"> *                       read and write to the linked peer.</span>
<a name="l00172"></a>00172 <span class="comment"> *</span>
<a name="l00173"></a>00173 <span class="comment"> * @return   status of operation.</span>
<a name="l00174"></a>00174 <span class="comment"> *             SMPL_SUCCESS</span>
<a name="l00175"></a>00175 <span class="comment"> *             SMPL_TIMEOUT  No link frame received during listen interval.</span>
<a name="l00176"></a>00176 <span class="comment">*                            Interval set in #defines above. linkID not valid.</span>
<a name="l00177"></a>00177 <span class="comment"> *</span>
<a name="l00178"></a>00178 <span class="comment"> */</span>
<a name="l00179"></a>00179 
<a name="l00180"></a><a class="code" href="nwk__api_8h.html#337884d70b9bd8feb6a7ccc7bb86595b">00180</a> <a class="code" href="nwk__types_8h.html#bc3335170bd809d2456c3764595bb41f">smplStatus_t</a> <a class="code" href="nwk__api_8c.html#8c26f7f7f565e54a53bc49fd82625a1d">SMPL_LinkListen</a>(<a class="code" href="nwk__types_8h.html#f8f720dc4ed059245ecf82cd256ffa54">linkID_t</a> *linkID)
<a name="l00181"></a>00181 {
<a name="l00182"></a>00182   <a class="code" href="bsp__msp430__defs_8h.html#3ebf7c4fcbf17b618a01df30a79859d3">uint8_t</a>  radioState = <a class="code" href="mrfi_8h.html#b3cd122ea368cc193f2900d1ebbcfbcc">MRFI_GetRadioState</a>();
<a name="l00183"></a>00183   <a class="code" href="bsp__msp430__defs_8h.html#009defcb88ef0180917f5d2ca68a5c30">uint16_t</a> i;
<a name="l00184"></a>00184   <a class="code" href="nwk__types_8h.html#f8f720dc4ed059245ecf82cd256ffa54">linkID_t</a> locLinkID;
<a name="l00185"></a>00185 
<a name="l00186"></a>00186   <span class="comment">/* Set the context. We want to reject any link frames received if</span>
<a name="l00187"></a>00187 <span class="comment">   * we're not listening. For example if we're an AP we are in</span>
<a name="l00188"></a>00188 <span class="comment">   * promiscuous mode and we'll see any broadcast link frames.</span>
<a name="l00189"></a>00189 <span class="comment">   */</span>
<a name="l00190"></a>00190   <a class="code" href="nwk__link_8c.html#8d286944bf8bba55f0cf5aa7da02158c">nwk_setListenContext</a>(<a class="code" href="nwk__link_8h.html#c2a50cad9eef5887acc558b4c932e92b">LINK_LISTEN_ON</a>);
<a name="l00191"></a>00191 
<a name="l00192"></a>00192   <a class="code" href="nwk__types_8h.html#a7801a3d753c047482620d9d406c07e5">NWK_CHECK_FOR_SETRX</a>(radioState);
<a name="l00193"></a>00193 
<a name="l00194"></a>00194   <span class="keywordflow">for</span> (i=0; i&lt;<a class="code" href="nwk__api_8c.html#ba15cc1e5d054e1e19c7bd2f7a43b947">LINKLISTEN_POLL_COUNT</a>; ++i)
<a name="l00195"></a>00195   {
<a name="l00196"></a>00196     <span class="comment">/* check the semaphore. local port is assigned when the reply is sent. */</span>
<a name="l00197"></a>00197     <span class="keywordflow">if</span> ((locLinkID=<a class="code" href="nwk__link_8c.html#cd0d254308e827ac53e215f6c8fb10d2">nwk_getLocalLinkID</a>()))
<a name="l00198"></a>00198     {
<a name="l00199"></a>00199       <span class="keywordflow">break</span>;
<a name="l00200"></a>00200     }
<a name="l00201"></a>00201     <a class="code" href="nwk__types_8h.html#192a02d5e3eed6c6b54dcdd7cf45cd77">NWK_DELAY</a>(<a class="code" href="nwk__api_8c.html#8bb45c9c671172a10089033f4972a522">LINKLISTEN_POLL_PERIOD_MS</a>);
<a name="l00202"></a>00202   }
<a name="l00203"></a>00203 
<a name="l00204"></a>00204   <a class="code" href="nwk__types_8h.html#5e18c8a07c804ab18dd8348195af1e10">NWK_CHECK_FOR_RESTORE_STATE</a>(radioState);
<a name="l00205"></a>00205 
<a name="l00206"></a>00206   <span class="comment">/* If the listen is terminated without hearing a message and setting a</span>
<a name="l00207"></a>00207 <span class="comment">   * link ID the listen context must be explicitly turned off.</span>
<a name="l00208"></a>00208 <span class="comment">   */</span>
<a name="l00209"></a>00209   <span class="keywordflow">if</span> (!(locLinkID))
<a name="l00210"></a>00210   {
<a name="l00211"></a>00211     <a class="code" href="nwk__link_8c.html#8d286944bf8bba55f0cf5aa7da02158c">nwk_setListenContext</a>(<a class="code" href="nwk__link_8h.html#c1cb11a9acc65d03756b65b3cff16c50">LINK_LISTEN_OFF</a>);
<a name="l00212"></a>00212     <span class="keywordflow">return</span> <a class="code" href="nwk__types_8h.html#e0b034bf9575c473b7fd4ba5daa0155e70573914d36e96ff435bd7a5b03f8626">SMPL_TIMEOUT</a>;
<a name="l00213"></a>00213   }
<a name="l00214"></a>00214 
<a name="l00215"></a>00215   *linkID = locLinkID;
<a name="l00216"></a>00216 
<a name="l00217"></a>00217   <span class="keywordflow">return</span> <a class="code" href="nwk__types_8h.html#e0b034bf9575c473b7fd4ba5daa0155e1587bead2fa0982ec696a5dd4458aa56">SMPL_SUCCESS</a>;
<a name="l00218"></a>00218 }
<a name="l00219"></a>00219 
<a name="l00220"></a>00220 <span class="comment">/******************************************************************************</span>
<a name="l00221"></a>00221 <span class="comment"> * @fn          SMPL_Send</span>
<a name="l00222"></a>00222 <span class="comment"> *</span>
<a name="l00223"></a>00223 <span class="comment"> * @brief       Send a message to a peer application. Old API kept for</span>
<a name="l00224"></a>00224 <span class="comment"> *              backward compatibility. Calls the new SMPL_SendOpt() with</span>
<a name="l00225"></a>00225 <span class="comment"> *              no options.</span>
<a name="l00226"></a>00226 <span class="comment"> *</span>
<a name="l00227"></a>00227 <span class="comment"> * input parameters</span>
<a name="l00228"></a>00228 <span class="comment"> * @param   lid     - Link ID (port) from application</span>
<a name="l00229"></a>00229 <span class="comment"> * @param   msg     - pointer to message from app to be sent</span>
<a name="l00230"></a>00230 <span class="comment"> * @param   len     - length of enclosed message</span>
<a name="l00231"></a>00231 <span class="comment"> *</span>
<a name="l00232"></a>00232 <span class="comment"> * output parameters</span>
<a name="l00233"></a>00233 <span class="comment"> *</span>
<a name="l00234"></a>00234 <span class="comment"> * @return   Status of operation. On a filaure the frame buffer is discarded</span>
<a name="l00235"></a>00235 <span class="comment"> *           and the Send call must be redone by the app.</span>
<a name="l00236"></a>00236 <span class="comment"> *             SMPL_SUCCESS</span>
<a name="l00237"></a>00237 <span class="comment"> *             SMPL_BAD_PARAM    No valid Connection Table entry for Link ID</span>
<a name="l00238"></a>00238 <span class="comment"> *                               Data in Connection Table entry bad</span>
<a name="l00239"></a>00239 <span class="comment"> *                               No message or message too long</span>
<a name="l00240"></a>00240 <span class="comment"> *             SMPL_NOMEM        No room in output frame queue</span>
<a name="l00241"></a>00241 <span class="comment"> *             SMPL_TX_CCA_FAIL  CCA failure.</span>
<a name="l00242"></a>00242 <span class="comment"> */</span>
<a name="l00243"></a><a class="code" href="nwk__api_8h.html#cc92c0cef1824ab9248bc87813b311cf">00243</a> <a class="code" href="nwk__types_8h.html#bc3335170bd809d2456c3764595bb41f">smplStatus_t</a> <a class="code" href="nwk__api_8c.html#cc92c0cef1824ab9248bc87813b311cf">SMPL_Send</a>(<a class="code" href="nwk__types_8h.html#f8f720dc4ed059245ecf82cd256ffa54">linkID_t</a> lid, <a class="code" href="bsp__msp430__defs_8h.html#3ebf7c4fcbf17b618a01df30a79859d3">uint8_t</a> *msg, <a class="code" href="bsp__msp430__defs_8h.html#3ebf7c4fcbf17b618a01df30a79859d3">uint8_t</a> len)
<a name="l00244"></a>00244 {
<a name="l00245"></a>00245   <span class="keywordflow">return</span> <a class="code" href="nwk__api_8c.html#b163e9f6327dfdf619778fcae4dca784">SMPL_SendOpt</a>(lid, msg, len, <a class="code" href="nwk__api_8h.html#80f8b98f2e6bdcd1a857f77d381596f5">SMPL_TXOPTION_NONE</a>);
<a name="l00246"></a>00246 }
<a name="l00247"></a>00247 
<a name="l00248"></a>00248 <span class="comment">/******************************************************************************</span>
<a name="l00249"></a>00249 <span class="comment"> * @fn          SMPL_SendOpt</span>
<a name="l00250"></a>00250 <span class="comment"> *</span>
<a name="l00251"></a>00251 <span class="comment"> * @brief       Send a message to a peer application.</span>
<a name="l00252"></a>00252 <span class="comment"> *</span>
<a name="l00253"></a>00253 <span class="comment"> * input parameters</span>
<a name="l00254"></a>00254 <span class="comment"> * @param   lid     - Link ID (port) from application</span>
<a name="l00255"></a>00255 <span class="comment"> * @param   msg     - pointer to message from app to be sent</span>
<a name="l00256"></a>00256 <span class="comment"> * @param   len     - length of enclosed message</span>
<a name="l00257"></a>00257 <span class="comment"> * @param   options - Transmit options (bit map)</span>
<a name="l00258"></a>00258 <span class="comment"> *</span>
<a name="l00259"></a>00259 <span class="comment"> * output parameters</span>
<a name="l00260"></a>00260 <span class="comment"> *</span>
<a name="l00261"></a>00261 <span class="comment"> * @return   Status of operation. On a filaure the frame buffer is discarded</span>
<a name="l00262"></a>00262 <span class="comment"> *           and the Send call must be redone by the app.</span>
<a name="l00263"></a>00263 <span class="comment"> *             SMPL_SUCCESS</span>
<a name="l00264"></a>00264 <span class="comment"> *             SMPL_BAD_PARAM    No valid Connection Table entry for Link ID</span>
<a name="l00265"></a>00265 <span class="comment"> *                               Data in Connection Table entry bad</span>
<a name="l00266"></a>00266 <span class="comment"> *                               No message or message too long</span>
<a name="l00267"></a>00267 <span class="comment"> *             SMPL_NOMEM        No room in output frame queue</span>
<a name="l00268"></a>00268 <span class="comment"> *             SMPL_TX_CCA_FAIL  CCA failure.</span>
<a name="l00269"></a>00269 <span class="comment"> *             SMPL_NO_ACK       If application auto acknowledgement enabled</span>
<a name="l00270"></a>00270 <span class="comment"> *                               and no acknowledgement is received</span>
<a name="l00271"></a>00271 <span class="comment"> */</span>
<a name="l00272"></a><a class="code" href="nwk__api_8h.html#d84d96852a9a2b0e9284c919d25adc94">00272</a> <a class="code" href="nwk__types_8h.html#bc3335170bd809d2456c3764595bb41f">smplStatus_t</a> <a class="code" href="nwk__api_8c.html#b163e9f6327dfdf619778fcae4dca784">SMPL_SendOpt</a>(<a class="code" href="nwk__types_8h.html#f8f720dc4ed059245ecf82cd256ffa54">linkID_t</a> lid, <a class="code" href="bsp__msp430__defs_8h.html#3ebf7c4fcbf17b618a01df30a79859d3">uint8_t</a> *msg, <a class="code" href="bsp__msp430__defs_8h.html#3ebf7c4fcbf17b618a01df30a79859d3">uint8_t</a> len, <a class="code" href="nwk__types_8h.html#30b8a6eb654ffd412cbf288b65e77193">txOpt_t</a> options)
<a name="l00273"></a>00273 {
<a name="l00274"></a>00274   <a class="code" href="structframeInfo__t.html">frameInfo_t</a>  *pFrameInfo;
<a name="l00275"></a>00275   <a class="code" href="structconnInfo__t.html">connInfo_t</a>   *pCInfo     = <a class="code" href="nwk_8c.html#3682eb43b9a650b6f914589125826b7b">nwk_getConnInfo</a>(lid);
<a name="l00276"></a>00276   <a class="code" href="nwk__types_8h.html#bc3335170bd809d2456c3764595bb41f">smplStatus_t</a>  rc         = <a class="code" href="nwk__types_8h.html#e0b034bf9575c473b7fd4ba5daa0155eea44aa921af7d502aee7df35a86377b7">SMPL_BAD_PARAM</a>;
<a name="l00277"></a>00277   <a class="code" href="bsp__msp430__defs_8h.html#3ebf7c4fcbf17b618a01df30a79859d3">uint8_t</a>       radioState = <a class="code" href="mrfi_8h.html#b3cd122ea368cc193f2900d1ebbcfbcc">MRFI_GetRadioState</a>();
<a name="l00278"></a>00278   <a class="code" href="bsp__msp430__defs_8h.html#3ebf7c4fcbf17b618a01df30a79859d3">uint8_t</a>       ackreq     = 0;
<a name="l00279"></a>00279 <span class="preprocessor">#if defined(ACCESS_POINT)</span>
<a name="l00280"></a>00280 <span class="preprocessor"></span>  <a class="code" href="bsp__msp430__defs_8h.html#3ebf7c4fcbf17b618a01df30a79859d3">uint8_t</a>  loc;
<a name="l00281"></a>00281 <span class="preprocessor">#endif</span>
<a name="l00282"></a>00282 <span class="preprocessor"></span>
<a name="l00283"></a>00283   <span class="comment">/* we have the connection info for this Link ID. make sure it is valid. */</span>
<a name="l00284"></a>00284    <span class="keywordflow">if</span> (!pCInfo || ((rc=<a class="code" href="nwk_8c.html#71e6527de9c6412588cb5c9ca8129f24">nwk_checkConnInfo</a>(pCInfo, <a class="code" href="nwk_8h.html#41b4d3eae946a4f65a509fb52b422f6f">CHK_TX</a>)) != <a class="code" href="nwk__types_8h.html#e0b034bf9575c473b7fd4ba5daa0155e1587bead2fa0982ec696a5dd4458aa56">SMPL_SUCCESS</a>))
<a name="l00285"></a>00285   {
<a name="l00286"></a>00286     <span class="keywordflow">return</span> rc;
<a name="l00287"></a>00287   }
<a name="l00288"></a>00288 
<a name="l00289"></a>00289   <span class="comment">/* parameter sanity check... */</span>
<a name="l00290"></a>00290   <span class="keywordflow">if</span> (!msg || (len &gt; MAX_APP_PAYLOAD))
<a name="l00291"></a>00291   {
<a name="l00292"></a>00292     <span class="keywordflow">return</span> rc;
<a name="l00293"></a>00293   }
<a name="l00294"></a>00294 
<a name="l00295"></a>00295   <span class="comment">/* Build an outgoing message frame destined for the port from the</span>
<a name="l00296"></a>00296 <span class="comment">   * connection info using the destination address also from the</span>
<a name="l00297"></a>00297 <span class="comment">   * connection info.</span>
<a name="l00298"></a>00298 <span class="comment">   */</span>
<a name="l00299"></a>00299   <span class="keywordflow">if</span> (<a class="code" href="nwk__api_8h.html#80f8b98f2e6bdcd1a857f77d381596f5">SMPL_TXOPTION_NONE</a> == options)
<a name="l00300"></a>00300   {
<a name="l00301"></a>00301     pFrameInfo = <a class="code" href="nwk__frame_8c.html#10dcb91cdb785c086e0b09e43bbf0281">nwk_buildFrame</a>(pCInfo-&gt;<a class="code" href="structconnInfo__t.html#e914659f839e3915dbdc2cf9b4824cfc">portTx</a>, msg, len, pCInfo-&gt;<a class="code" href="structconnInfo__t.html#553c558ad464f76f0b09aa691dfc2101">hops2target</a>);
<a name="l00302"></a>00302   }
<a name="l00303"></a>00303 <span class="preprocessor">#if defined(APP_AUTO_ACK)</span>
<a name="l00304"></a>00304 <span class="preprocessor"></span>  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (options &amp; <a class="code" href="nwk__api_8h.html#218b7e771253534dfa194c38f3b9c7ef">SMPL_TXOPTION_ACKREQ</a>)
<a name="l00305"></a>00305   {
<a name="l00306"></a>00306     <span class="keywordflow">if</span> (<a class="code" href="nwk_8h.html#118268a7808649aacf235d5696a980ce">SMPL_LINKID_USER_UUD</a> != lid)
<a name="l00307"></a>00307     {
<a name="l00308"></a>00308       pFrameInfo = nwk_buildAckReqFrame(pCInfo-&gt;<a class="code" href="structconnInfo__t.html#e914659f839e3915dbdc2cf9b4824cfc">portTx</a>, msg, len, pCInfo-&gt;<a class="code" href="structconnInfo__t.html#553c558ad464f76f0b09aa691dfc2101">hops2target</a>, &amp;pCInfo-&gt;ackTID);
<a name="l00309"></a>00309       ackreq     = 1;
<a name="l00310"></a>00310     }
<a name="l00311"></a>00311     <span class="keywordflow">else</span>
<a name="l00312"></a>00312     {
<a name="l00313"></a>00313       <span class="comment">/* can't request an ack on the UUD link ID */</span>
<a name="l00314"></a>00314       <span class="keywordflow">return</span> <a class="code" href="nwk__types_8h.html#e0b034bf9575c473b7fd4ba5daa0155eea44aa921af7d502aee7df35a86377b7">SMPL_BAD_PARAM</a>;
<a name="l00315"></a>00315     }
<a name="l00316"></a>00316   }
<a name="l00317"></a>00317 <span class="preprocessor">#endif  </span><span class="comment">/* APP_AUTO_ACK */</span>
<a name="l00318"></a>00318   <span class="keywordflow">else</span>
<a name="l00319"></a>00319   {
<a name="l00320"></a>00320     <span class="keywordflow">return</span> <a class="code" href="nwk__types_8h.html#e0b034bf9575c473b7fd4ba5daa0155eea44aa921af7d502aee7df35a86377b7">SMPL_BAD_PARAM</a>;
<a name="l00321"></a>00321   }
<a name="l00322"></a>00322 
<a name="l00323"></a>00323   <span class="keywordflow">if</span> (!pFrameInfo)
<a name="l00324"></a>00324   {
<a name="l00325"></a>00325     <span class="keywordflow">return</span> <a class="code" href="nwk__types_8h.html#e0b034bf9575c473b7fd4ba5daa0155ee401fb249ec01cc76f6354a58612e0bc">SMPL_NOMEM</a>;
<a name="l00326"></a>00326   }
<a name="l00327"></a>00327   memcpy(<a class="code" href="mrfi_8h.html#4c6ccf692a5a03b1614af28106157a05">MRFI_P_DST_ADDR</a>(&amp;pFrameInfo-&gt;<a class="code" href="structframeInfo__t.html#761ae14e3588ca7ecbb6fec0c14b9673">mrfiPkt</a>), pCInfo-&gt;<a class="code" href="structconnInfo__t.html#6cde46f170fc0d98c18803d1819b0255">peerAddr</a>, <a class="code" href="nwk__types_8h.html#e02a66bd1cfdc9b099bcea9b29704a66">NET_ADDR_SIZE</a>);
<a name="l00328"></a>00328 
<a name="l00329"></a>00329 <span class="preprocessor">#if defined(SMPL_SECURE)</span>
<a name="l00330"></a>00330 <span class="preprocessor"></span>  {
<a name="l00331"></a>00331     <a class="code" href="bsp__msp430__defs_8h.html#ce049f43925d786f75724a33b9f503cc">uint32_t</a> *pUL = 0;
<a name="l00332"></a>00332 
<a name="l00333"></a>00333     <span class="keywordflow">if</span> (pCInfo-&gt;<a class="code" href="structconnInfo__t.html#6eb8579357af73f26f41ebabdc174324">thisLinkID</a> != <a class="code" href="nwk_8h.html#118268a7808649aacf235d5696a980ce">SMPL_LINKID_USER_UUD</a>)
<a name="l00334"></a>00334     {
<a name="l00335"></a>00335       pUL = &amp;pCInfo-&gt;connTxCTR;
<a name="l00336"></a>00336     }
<a name="l00337"></a>00337     <a class="code" href="nwk__security_8h.html#f124cfec802c86dd5d7e6360c1caefe8">nwk_setSecureFrame</a>(&amp;pFrameInfo-&gt;<a class="code" href="structframeInfo__t.html#761ae14e3588ca7ecbb6fec0c14b9673">mrfiPkt</a>, len, pUL);
<a name="l00338"></a>00338   }
<a name="l00339"></a>00339 <span class="preprocessor">#endif  </span><span class="comment">/* SMPL_SECURE */</span>
<a name="l00340"></a>00340 
<a name="l00341"></a>00341 <span class="preprocessor">#if defined(ACCESS_POINT)</span>
<a name="l00342"></a>00342 <span class="preprocessor"></span>  <span class="comment">/* If we are an AP trying to send to a polling device, don't do it.</span>
<a name="l00343"></a>00343 <span class="comment">   * See if the target is a store-and-forward client.</span>
<a name="l00344"></a>00344 <span class="comment">   */</span>
<a name="l00345"></a>00345   <span class="keywordflow">if</span> (nwk_isSandFClient(<a class="code" href="mrfi_8h.html#4c6ccf692a5a03b1614af28106157a05">MRFI_P_DST_ADDR</a>(&amp;pFrameInfo-&gt;<a class="code" href="structframeInfo__t.html#761ae14e3588ca7ecbb6fec0c14b9673">mrfiPkt</a>), &amp;loc))
<a name="l00346"></a>00346   {
<a name="l00347"></a>00347      pFrameInfo-&gt;<a class="code" href="structframeInfo__t.html#507422d604241024140b98d1d7920f7f">fi_usage</a> = <a class="code" href="nwk__frame_8h.html#03f3743aac94b968734ac023111b419b">FI_INUSE_UNTIL_FWD</a>;
<a name="l00348"></a>00348      <span class="keywordflow">return</span> <a class="code" href="nwk__types_8h.html#e0b034bf9575c473b7fd4ba5daa0155e1587bead2fa0982ec696a5dd4458aa56">SMPL_SUCCESS</a>;
<a name="l00349"></a>00349   }
<a name="l00350"></a>00350   <span class="keywordflow">else</span>
<a name="l00351"></a>00351 <span class="preprocessor">#endif  </span><span class="comment">/* ACCESS_POINT */</span>
<a name="l00352"></a>00352   {
<a name="l00353"></a>00353     rc = <a class="code" href="nwk__frame_8c.html#d3b2907dd4eb2703595235745c91b705">nwk_sendFrame</a>(pFrameInfo, <a class="code" href="mrfi_8h.html#b9d50ee5f65cfcaa63fefa633ce5fb7b">MRFI_TX_TYPE_CCA</a>);
<a name="l00354"></a>00354   }
<a name="l00355"></a>00355 
<a name="l00356"></a>00356 <span class="preprocessor">#if !defined(APP_AUTO_ACK)</span>
<a name="l00357"></a>00357 <span class="preprocessor"></span>  <span class="comment">/* save a little code space with this #if */</span>
<a name="l00358"></a>00358   (void) ackreq;    <span class="comment">/* keep compiler happy */</span>
<a name="l00359"></a>00359   <span class="keywordflow">return</span> rc;
<a name="l00360"></a>00360 <span class="preprocessor">#else</span>
<a name="l00361"></a>00361 <span class="preprocessor"></span>  <span class="comment">/* we're done if the send failed or no ack requested. */</span>
<a name="l00362"></a>00362   <span class="keywordflow">if</span> (<a class="code" href="nwk__types_8h.html#e0b034bf9575c473b7fd4ba5daa0155e1587bead2fa0982ec696a5dd4458aa56">SMPL_SUCCESS</a> != rc || !ackreq)
<a name="l00363"></a>00363   {
<a name="l00364"></a>00364     <span class="keywordflow">return</span> rc;
<a name="l00365"></a>00365   }
<a name="l00366"></a>00366 
<a name="l00367"></a>00367   <a class="code" href="nwk__types_8h.html#a7801a3d753c047482620d9d406c07e5">NWK_CHECK_FOR_SETRX</a>(radioState);
<a name="l00368"></a>00368   <a class="code" href="nwk__types_8h.html#8c752c7e2828d3502045d80a2bfa9004">NWK_REPLY_DELAY</a>();
<a name="l00369"></a>00369   <a class="code" href="nwk__types_8h.html#5e18c8a07c804ab18dd8348195af1e10">NWK_CHECK_FOR_RESTORE_STATE</a>(radioState);
<a name="l00370"></a>00370 
<a name="l00371"></a>00371   {
<a name="l00372"></a>00372     <a class="code" href="bsp_8h.html#bc199de9e02e7db55d8102978a467a10">bspIState_t</a> intState;
<a name="l00373"></a>00373 
<a name="l00374"></a>00374     <span class="comment">/* If the saved TID hasn't been reset then we never got the ack. */</span>
<a name="l00375"></a>00375     <a class="code" href="bsp_8h.html#cc8a16bd9502874026350e36c456fb43">BSP_ENTER_CRITICAL_SECTION</a>(intState);
<a name="l00376"></a>00376     <span class="keywordflow">if</span> (pCInfo-&gt;ackTID)
<a name="l00377"></a>00377     {
<a name="l00378"></a>00378       pCInfo-&gt;ackTID = 0;
<a name="l00379"></a>00379       rc = <a class="code" href="nwk__types_8h.html#e0b034bf9575c473b7fd4ba5daa0155ed05f871e8e5f65fa363b2f34f5dfb3be">SMPL_NO_ACK</a>;
<a name="l00380"></a>00380     }
<a name="l00381"></a>00381     <a class="code" href="bsp_8h.html#fccdb2feb4a61479a88b2e6a82e85426">BSP_EXIT_CRITICAL_SECTION</a>(intState);
<a name="l00382"></a>00382   }
<a name="l00383"></a>00383 
<a name="l00384"></a>00384   <span class="keywordflow">return</span> rc;
<a name="l00385"></a>00385 <span class="preprocessor">#endif  </span><span class="comment">/* APP_AUTO_ACK */</span>
<a name="l00386"></a>00386 }
<a name="l00387"></a>00387 
<a name="l00388"></a>00388 <span class="comment">/**************************************************************************************</span>
<a name="l00389"></a>00389 <span class="comment"> * @fn          SMPL_Receive</span>
<a name="l00390"></a>00390 <span class="comment"> *</span>
<a name="l00391"></a>00391 <span class="comment"> * @brief       Receive a message from a peer application.</span>
<a name="l00392"></a>00392 <span class="comment"> *</span>
<a name="l00393"></a>00393 <span class="comment"> * input parameters</span>
<a name="l00394"></a>00394 <span class="comment"> * @param   lid     - Link ID (port) from application</span>
<a name="l00395"></a>00395 <span class="comment"> *</span>
<a name="l00396"></a>00396 <span class="comment"> *</span>
<a name="l00397"></a>00397 <span class="comment"> * output parameters</span>
<a name="l00398"></a>00398 <span class="comment"> * @param   msg     - pointer to where received message should be copied.</span>
<a name="l00399"></a>00399 <span class="comment"> *                    buffer should be of size == MAX_APP_PAYLOAD</span>
<a name="l00400"></a>00400 <span class="comment"> * @param   len     - pointer to receive length of received message</span>
<a name="l00401"></a>00401 <span class="comment"> *</span>
<a name="l00402"></a>00402 <span class="comment"> * @return    Status of operation.</span>
<a name="l00403"></a>00403 <span class="comment"> *            Caller should not use the value returned in 'len' to decide</span>
<a name="l00404"></a>00404 <span class="comment"> *            whether there is a frame or not. It could be useful to the</span>
<a name="l00405"></a>00405 <span class="comment"> *            Caller to distinguish between no frame and a frame with no data.</span>
<a name="l00406"></a>00406 <span class="comment"> *            For example, in the polling case a frame with no application payload</span>
<a name="l00407"></a>00407 <span class="comment"> *            is the way the AP conveys that there are no frames waiting.</span>
<a name="l00408"></a>00408 <span class="comment"> *</span>
<a name="l00409"></a>00409 <span class="comment"> *              SMPL_SUCCESS</span>
<a name="l00410"></a>00410 <span class="comment"> *</span>
<a name="l00411"></a>00411 <span class="comment"> *              SMPL_BAD_PARAM  No valid Connection Table entry for Link ID</span>
<a name="l00412"></a>00412 <span class="comment"> *                              Data in Connection Table entry bad</span>
<a name="l00413"></a>00413 <span class="comment"> *              SMPL_NO_FRAME   No frame received.</span>
<a name="l00414"></a>00414 <span class="comment"> *              SMPL_NO_PAYLOAD Frame received with no payload (not necessarily</span>
<a name="l00415"></a>00415 <span class="comment"> *                              an error and could be deduced by application</span>
<a name="l00416"></a>00416 <span class="comment"> *                              because the returned length will be 0)</span>
<a name="l00417"></a>00417 <span class="comment"> *</span>
<a name="l00418"></a>00418 <span class="comment"> *            Polling device only:</span>
<a name="l00419"></a>00419 <span class="comment"> *</span>
<a name="l00420"></a>00420 <span class="comment"> *              SMPL_TIMEOUT        No response from Access Point</span>
<a name="l00421"></a>00421 <span class="comment"> *              SMPL_NO_AP_ADDRESS  Access Point address unknown</span>
<a name="l00422"></a>00422 <span class="comment"> *              SMPL_TX_CCA_FAIL    Could not send poll frame</span>
<a name="l00423"></a>00423 <span class="comment"> *              SMPL_NOMEM          No memory in output frame queue</span>
<a name="l00424"></a>00424 <span class="comment"> *              SMPL_NO_CHANNEL     Frequency Agility enabled and could not find channel</span>
<a name="l00425"></a>00425 <span class="comment"> */</span>
<a name="l00426"></a><a class="code" href="nwk__api_8h.html#ad414563a9625de042943cee47659190">00426</a> <a class="code" href="nwk__types_8h.html#bc3335170bd809d2456c3764595bb41f">smplStatus_t</a> <a class="code" href="nwk__api_8c.html#ad414563a9625de042943cee47659190">SMPL_Receive</a>(<a class="code" href="nwk__types_8h.html#f8f720dc4ed059245ecf82cd256ffa54">linkID_t</a> lid, <a class="code" href="bsp__msp430__defs_8h.html#3ebf7c4fcbf17b618a01df30a79859d3">uint8_t</a> *msg, <a class="code" href="bsp__msp430__defs_8h.html#3ebf7c4fcbf17b618a01df30a79859d3">uint8_t</a> *len)
<a name="l00427"></a>00427 {
<a name="l00428"></a>00428   <a class="code" href="structconnInfo__t.html">connInfo_t</a>  *pCInfo = <a class="code" href="nwk_8c.html#3682eb43b9a650b6f914589125826b7b">nwk_getConnInfo</a>(lid);
<a name="l00429"></a>00429   <a class="code" href="nwk__types_8h.html#bc3335170bd809d2456c3764595bb41f">smplStatus_t</a> rc = <a class="code" href="nwk__types_8h.html#e0b034bf9575c473b7fd4ba5daa0155eea44aa921af7d502aee7df35a86377b7">SMPL_BAD_PARAM</a>;
<a name="l00430"></a>00430   <a class="code" href="structrcvContext__t.html">rcvContext_t</a> rcv;
<a name="l00431"></a>00431 
<a name="l00432"></a>00432   <span class="keywordflow">if</span> (!pCInfo || ((rc=<a class="code" href="nwk_8c.html#71e6527de9c6412588cb5c9ca8129f24">nwk_checkConnInfo</a>(pCInfo, <a class="code" href="nwk_8h.html#934c3b407fbd59d74f3c5c11e225e488">CHK_RX</a>)) != <a class="code" href="nwk__types_8h.html#e0b034bf9575c473b7fd4ba5daa0155e1587bead2fa0982ec696a5dd4458aa56">SMPL_SUCCESS</a>))
<a name="l00433"></a>00433   {
<a name="l00434"></a>00434     <span class="keywordflow">return</span> rc;
<a name="l00435"></a>00435   }
<a name="l00436"></a>00436 
<a name="l00437"></a>00437   rcv.<a class="code" href="structrcvContext__t.html#e433e5d52aa44c5c7879974de1ff176e">type</a>  = <a class="code" href="nwk__types_8h.html#8daa3210ac78449bb0c7c427e3ab7fafb7f155f334335c33cd1ce4e0a057fcd9">RCV_APP_LID</a>;
<a name="l00438"></a>00438   rcv.<a class="code" href="structrcvContext__t.html#e5743a9e0eb5d3725e4612c9997be345">t</a>.<a class="code" href="structrcvContext__t.html#8a4d21dd91a8050431ed02ba164efc31">lid</a> = lid;
<a name="l00439"></a>00439 
<a name="l00440"></a>00440 <span class="preprocessor">#if defined(RX_POLLS)</span>
<a name="l00441"></a>00441 <span class="preprocessor"></span>  {
<a name="l00442"></a>00442     <a class="code" href="bsp__msp430__defs_8h.html#3ebf7c4fcbf17b618a01df30a79859d3">uint8_t</a> numChans  = 1;
<a name="l00443"></a>00443 <span class="preprocessor">#if defined(FREQUENCY_AGILITY)</span>
<a name="l00444"></a>00444 <span class="preprocessor"></span>    <a class="code" href="structfreqEntry__t.html">freqEntry_t</a> chans[<a class="code" href="nwk__types_8h.html#a78d41db02d286d468b8b47e8a920434">NWK_FREQ_TBL_SIZE</a>];
<a name="l00445"></a>00445     <a class="code" href="bsp__msp430__defs_8h.html#3ebf7c4fcbf17b618a01df30a79859d3">uint8_t</a>     scannedB4 = 0;
<a name="l00446"></a>00446 <span class="preprocessor">#endif</span>
<a name="l00447"></a>00447 <span class="preprocessor"></span>
<a name="l00448"></a>00448     <span class="keywordflow">do</span>
<a name="l00449"></a>00449     {
<a name="l00450"></a>00450       <a class="code" href="bsp__msp430__defs_8h.html#3ebf7c4fcbf17b618a01df30a79859d3">uint8_t</a> radioState = <a class="code" href="mrfi_8h.html#b3cd122ea368cc193f2900d1ebbcfbcc">MRFI_GetRadioState</a>();
<a name="l00451"></a>00451 
<a name="l00452"></a>00452       <span class="comment">/* I'm polling. Do the poll to stimulate the sending of a frame. If the</span>
<a name="l00453"></a>00453 <span class="comment">       * frame has application length of 0 it means there were no frames.  If</span>
<a name="l00454"></a>00454 <span class="comment">       * no reply is received infer that the channel is changed. We then need</span>
<a name="l00455"></a>00455 <span class="comment">       * to scan and then retry the poll on each channel returned.</span>
<a name="l00456"></a>00456 <span class="comment">       */</span>
<a name="l00457"></a>00457       <span class="keywordflow">if</span> (<a class="code" href="nwk__types_8h.html#e0b034bf9575c473b7fd4ba5daa0155e1587bead2fa0982ec696a5dd4458aa56">SMPL_SUCCESS</a> != (rc=<a class="code" href="nwk__mgmt_8c.html#eb8863e3fe78dd258b705324d235f061">nwk_poll</a>(pCInfo-&gt;<a class="code" href="structconnInfo__t.html#b1b3fe395fb3d073d262e12257bd5b9a">portRx</a>, pCInfo-&gt;<a class="code" href="structconnInfo__t.html#6cde46f170fc0d98c18803d1819b0255">peerAddr</a>)))
<a name="l00458"></a>00458       {
<a name="l00459"></a>00459         <span class="comment">/* for some reason couldn't send the poll out. */</span>
<a name="l00460"></a>00460         <span class="keywordflow">return</span> rc;
<a name="l00461"></a>00461       }
<a name="l00462"></a>00462 
<a name="l00463"></a>00463       <span class="comment">/* do this before code block below which may reset it. */</span>
<a name="l00464"></a>00464       numChans--;
<a name="l00465"></a>00465 
<a name="l00466"></a>00466       <span class="comment">/* Wait until there's a frame. if the len is 0 then return SMPL_NO_FRAME</span>
<a name="l00467"></a>00467 <span class="comment">       * to the caller. In the poll case the AP always sends something.</span>
<a name="l00468"></a>00468 <span class="comment">       */</span>
<a name="l00469"></a>00469       <a class="code" href="nwk__types_8h.html#a7801a3d753c047482620d9d406c07e5">NWK_CHECK_FOR_SETRX</a>(radioState);
<a name="l00470"></a>00470       <a class="code" href="nwk__types_8h.html#8c752c7e2828d3502045d80a2bfa9004">NWK_REPLY_DELAY</a>();
<a name="l00471"></a>00471       <a class="code" href="nwk__types_8h.html#5e18c8a07c804ab18dd8348195af1e10">NWK_CHECK_FOR_RESTORE_STATE</a>(radioState);
<a name="l00472"></a>00472 
<a name="l00473"></a>00473       <span class="comment">/* TODO: deal with pending */</span>
<a name="l00474"></a>00474       rc = <a class="code" href="nwk__frame_8h.html#a6d91e70313bbaa2afbbd302c400cce5">nwk_retrieveFrame</a>(&amp;rcv, msg, len, 0, 0);
<a name="l00475"></a>00475 
<a name="l00476"></a>00476 <span class="preprocessor">#if defined(FREQUENCY_AGILITY)</span>
<a name="l00477"></a>00477 <span class="preprocessor"></span>      <span class="keywordflow">if</span> (<a class="code" href="nwk__types_8h.html#e0b034bf9575c473b7fd4ba5daa0155e1587bead2fa0982ec696a5dd4458aa56">SMPL_SUCCESS</a> == rc)
<a name="l00478"></a>00478       {
<a name="l00479"></a>00479         <span class="comment">/* we received something... */</span>
<a name="l00480"></a>00480         <span class="keywordflow">return</span> (*len) ? <a class="code" href="nwk__types_8h.html#e0b034bf9575c473b7fd4ba5daa0155e1587bead2fa0982ec696a5dd4458aa56">SMPL_SUCCESS</a> : <a class="code" href="nwk__types_8h.html#e0b034bf9575c473b7fd4ba5daa0155e909a3a823cafcc772edb0ea3d708878e">SMPL_NO_PAYLOAD</a>;
<a name="l00481"></a>00481       }
<a name="l00482"></a>00482 
<a name="l00483"></a>00483       <span class="comment">/* No reply. scan for other channel(s) if we haven't already. Then set</span>
<a name="l00484"></a>00484 <span class="comment">       * one and try again.</span>
<a name="l00485"></a>00485 <span class="comment">       */</span>
<a name="l00486"></a>00486       <span class="keywordflow">if</span> (!scannedB4)
<a name="l00487"></a>00487       {
<a name="l00488"></a>00488         numChans  = nwk_scanForChannels(chans);
<a name="l00489"></a>00489         scannedB4 = 1;
<a name="l00490"></a>00490       }
<a name="l00491"></a>00491       <span class="keywordflow">if</span> (numChans)
<a name="l00492"></a>00492       {
<a name="l00493"></a>00493         nwk_setChannel(&amp;chans[numChans-1]);
<a name="l00494"></a>00494       }
<a name="l00495"></a>00495 <span class="preprocessor">#else </span><span class="comment">/*  FREQUENCY_AGILITY */</span>
<a name="l00496"></a>00496       <span class="keywordflow">return</span> (*len) ? rc : ((<a class="code" href="nwk__types_8h.html#e0b034bf9575c473b7fd4ba5daa0155e1587bead2fa0982ec696a5dd4458aa56">SMPL_SUCCESS</a> == rc) ? <a class="code" href="nwk__types_8h.html#e0b034bf9575c473b7fd4ba5daa0155e909a3a823cafcc772edb0ea3d708878e">SMPL_NO_PAYLOAD</a> : <a class="code" href="nwk__types_8h.html#e0b034bf9575c473b7fd4ba5daa0155e70573914d36e96ff435bd7a5b03f8626">SMPL_TIMEOUT</a>);
<a name="l00497"></a>00497 <span class="preprocessor">#endif</span>
<a name="l00498"></a>00498 <span class="preprocessor"></span>    } <span class="keywordflow">while</span> (numChans);
<a name="l00499"></a>00499   }
<a name="l00500"></a>00500 
<a name="l00501"></a>00501 <span class="preprocessor">#if defined(FREQUENCY_AGILITY)</span>
<a name="l00502"></a>00502 <span class="preprocessor"></span>  <span class="keywordflow">return</span> <a class="code" href="nwk__types_8h.html#e0b034bf9575c473b7fd4ba5daa0155ee851053a26794809f03b37632301f1dc">SMPL_NO_CHANNEL</a>;
<a name="l00503"></a>00503 <span class="preprocessor">#endif</span>
<a name="l00504"></a>00504 <span class="preprocessor"></span>
<a name="l00505"></a>00505 <span class="preprocessor">#else  </span><span class="comment">/* RX_POLLS */</span>
<a name="l00506"></a>00506   <span class="keywordflow">return</span> <a class="code" href="nwk__frame_8h.html#a6d91e70313bbaa2afbbd302c400cce5">nwk_retrieveFrame</a>(&amp;rcv, msg, len, 0, 0);
<a name="l00507"></a>00507 <span class="preprocessor">#endif  </span><span class="comment">/* RX_POLLS */</span>
<a name="l00508"></a>00508 }
<a name="l00509"></a>00509 
<a name="l00510"></a>00510 
<a name="l00511"></a>00511 <span class="comment">/******************************************************************************</span>
<a name="l00512"></a>00512 <span class="comment"> * @fn          SMPL_Link</span>
<a name="l00513"></a>00513 <span class="comment"> *</span>
<a name="l00514"></a>00514 <span class="comment"> * @brief       Link to a peer.</span>
<a name="l00515"></a>00515 <span class="comment"> *</span>
<a name="l00516"></a>00516 <span class="comment"> * input parameters</span>
<a name="l00517"></a>00517 <span class="comment"> *</span>
<a name="l00518"></a>00518 <span class="comment"> * output parameters</span>
<a name="l00519"></a>00519 <span class="comment"> * @param   lid     - pointer to where we should write the link ID to which the</span>
<a name="l00520"></a>00520 <span class="comment"> *                    application will read and write.</span>
<a name="l00521"></a>00521 <span class="comment"> *</span>
<a name="l00522"></a>00522 <span class="comment"> * @return   Status of operation.</span>
<a name="l00523"></a>00523 <span class="comment"> *             SMPL_SUCCESS</span>
<a name="l00524"></a>00524 <span class="comment"> *             SMPL_NOMEM         No room to allocate local Rx port, no more</span>
<a name="l00525"></a>00525 <span class="comment"> *                                room in Connection Table, or no room in</span>
<a name="l00526"></a>00526 <span class="comment"> *                                output frame queue.</span>
<a name="l00527"></a>00527 <span class="comment"> *             SMPL_NO_LINK       No reply frame during wait window.</span>
<a name="l00528"></a>00528 <span class="comment"> *             SMPL_TX_CCA_FAIL   Could not send Link frame.</span>
<a name="l00529"></a>00529 <span class="comment"> */</span>
<a name="l00530"></a><a class="code" href="nwk__api_8h.html#d7ab5b70e6a087e854d5d011eada4889">00530</a> <a class="code" href="nwk__types_8h.html#bc3335170bd809d2456c3764595bb41f">smplStatus_t</a> <a class="code" href="nwk__api_8c.html#71db12ee51ac285299c0211b17cbad92">SMPL_Link</a>(<a class="code" href="nwk__types_8h.html#f8f720dc4ed059245ecf82cd256ffa54">linkID_t</a> *lid)
<a name="l00531"></a>00531 {
<a name="l00532"></a>00532   <span class="keywordflow">return</span> <a class="code" href="nwk__link_8c.html#c443de583f1b5d41ad30a130806a9ab8">nwk_link</a>(lid);
<a name="l00533"></a>00533 }
<a name="l00534"></a>00534 
<a name="l00535"></a>00535 <span class="preprocessor">#if defined(EXTENDED_API)</span>
<a name="l00536"></a>00536 <span class="preprocessor"></span><span class="comment">/**************************************************************************************</span>
<a name="l00537"></a>00537 <span class="comment"> * @fn          SMPL_Unlink</span>
<a name="l00538"></a>00538 <span class="comment"> *</span>
<a name="l00539"></a>00539 <span class="comment"> * @brief       Tear down connection to a peer.</span>
<a name="l00540"></a>00540 <span class="comment"> *</span>
<a name="l00541"></a>00541 <span class="comment"> * input parameters</span>
<a name="l00542"></a>00542 <span class="comment"> * @param   lid     - Link ID whose connection is to be terminated.</span>
<a name="l00543"></a>00543 <span class="comment"> *</span>
<a name="l00544"></a>00544 <span class="comment"> * output parameters</span>
<a name="l00545"></a>00545 <span class="comment"> *</span>
<a name="l00546"></a>00546 <span class="comment"> * @return   Status of operation. The Connection Table entry for the Link ID</span>
<a name="l00547"></a>00547 <span class="comment"> *           is always freed successfuly. The returned status value is the</span>
<a name="l00548"></a>00548 <span class="comment"> *           status of the _peer's_ connection tear-down as a result of the</span>
<a name="l00549"></a>00549 <span class="comment"> *           message sent here.</span>
<a name="l00550"></a>00550 <span class="comment"> *           SMPL_SUCCESS         Local and remote connection destroyed.</span>
<a name="l00551"></a>00551 <span class="comment"> *           SMPL_BAD_PARAM       No local connection table entry for this Link ID</span>
<a name="l00552"></a>00552 <span class="comment"> *           SMPL_TIMEOUT         No reply from peer.</span>
<a name="l00553"></a>00553 <span class="comment"> *           SMPL_NO_PEER_UNLINK  Peer did not have a Connection Table entry for me.</span>
<a name="l00554"></a>00554 <span class="comment"> */</span>
<a name="l00555"></a>00555 <a class="code" href="nwk__types_8h.html#bc3335170bd809d2456c3764595bb41f">smplStatus_t</a> SMPL_Unlink(<a class="code" href="nwk__types_8h.html#f8f720dc4ed059245ecf82cd256ffa54">linkID_t</a> lid)
<a name="l00556"></a>00556 {
<a name="l00557"></a>00557   <span class="keywordflow">return</span> <a class="code" href="nwk__link_8h.html#67301fc42c607d53d8b36e6c995deb44">nwk_unlink</a>(lid);
<a name="l00558"></a>00558 }
<a name="l00559"></a>00559 
<a name="l00560"></a>00560 <span class="comment">/**************************************************************************************</span>
<a name="l00561"></a>00561 <span class="comment"> * @fn          SMPL_Ping</span>
<a name="l00562"></a>00562 <span class="comment"> *</span>
<a name="l00563"></a>00563 <span class="comment"> * @brief       Ping a peer. Synchronous call. Although a link ID is used it is the</span>
<a name="l00564"></a>00564 <span class="comment"> *              NWK Ping application that is pinged, not the peer of this Link ID. The</span>
<a name="l00565"></a>00565 <span class="comment"> *              peer is not expected to be the responder to the frame sent from here.</span>
<a name="l00566"></a>00566 <span class="comment"> *              This API is a proxy for a real ping since the application doesn't</span>
<a name="l00567"></a>00567 <span class="comment"> *              have direct access to SimpliciTI device addresses. Kind of hokey but a</span>
<a name="l00568"></a>00568 <span class="comment"> *              useful keep-alive mechanism without having to support it with</span>
<a name="l00569"></a>00569 <span class="comment"> *              user application service.</span>
<a name="l00570"></a>00570 <span class="comment"> *</span>
<a name="l00571"></a>00571 <span class="comment"> * input parameters</span>
<a name="l00572"></a>00572 <span class="comment"> * @param   lid  - The link ID whose peer device address is used to direct the NWK Ping</span>
<a name="l00573"></a>00573 <span class="comment"> *</span>
<a name="l00574"></a>00574 <span class="comment"> * output parameters</span>
<a name="l00575"></a>00575 <span class="comment"> *</span>
<a name="l00576"></a>00576 <span class="comment"> * @return   Status of operation.</span>
<a name="l00577"></a>00577 <span class="comment"> */</span>
<a name="l00578"></a>00578 <a class="code" href="nwk__types_8h.html#bc3335170bd809d2456c3764595bb41f">smplStatus_t</a> SMPL_Ping(<a class="code" href="nwk__types_8h.html#f8f720dc4ed059245ecf82cd256ffa54">linkID_t</a> lid)
<a name="l00579"></a>00579 {
<a name="l00580"></a>00580   <span class="keywordflow">return</span> <a class="code" href="nwk__ping_8c.html#46031b66dec84939fac83f9130f2d7aa">nwk_ping</a>(lid);
<a name="l00581"></a>00581 }
<a name="l00582"></a>00582 
<a name="l00583"></a>00583 <span class="comment">/**************************************************************************************</span>
<a name="l00584"></a>00584 <span class="comment"> * @fn          SMPL_Commission</span>
<a name="l00585"></a>00585 <span class="comment"> *</span>
<a name="l00586"></a>00586 <span class="comment"> * @brief       Commission a connection.</span>
<a name="l00587"></a>00587 <span class="comment"> *</span>
<a name="l00588"></a>00588 <span class="comment"> * input parameters</span>
<a name="l00589"></a>00589 <span class="comment"> * @param   peerAddr  - Pointer to address of the peer for this connection</span>
<a name="l00590"></a>00590 <span class="comment"> * @param    locPort  - Port on which to listen for messages from the peer</span>
<a name="l00591"></a>00591 <span class="comment"> * @param    rmtPort  - Port on which to send messages to the peer.</span>
<a name="l00592"></a>00592 <span class="comment"> * @param        lid  - Pointer to Link ID object. If content of location is</span>
<a name="l00593"></a>00593 <span class="comment"> *                      non-zero on input the value is placed in the Connection</span>
<a name="l00594"></a>00594 <span class="comment"> *                      object.</span>
<a name="l00595"></a>00595 <span class="comment"> *</span>
<a name="l00596"></a>00596 <span class="comment"> * output parameters</span>
<a name="l00597"></a>00597 <span class="comment"> * @param        lid  - Pointer to Link ID object. If content of location is zero</span>
<a name="l00598"></a>00598 <span class="comment"> *                      on input the value in the Connection object is stored there.</span>
<a name="l00599"></a>00599 <span class="comment"> *</span>
<a name="l00600"></a>00600 <span class="comment"> * @return   SMPL_SUCCESS</span>
<a name="l00601"></a>00601 <span class="comment"> *           SMPL_NOMEM     - No room left in Connection table.</span>
<a name="l00602"></a>00602 <span class="comment"> *           SMPL_BAD_PARAM - A pointer to a Link object was not supplied.</span>
<a name="l00603"></a>00603 <span class="comment"> */</span>
<a name="l00604"></a>00604 <a class="code" href="nwk__types_8h.html#bc3335170bd809d2456c3764595bb41f">smplStatus_t</a> SMPL_Commission(<a class="code" href="structaddr__t.html">addr_t</a> *peerAddr, <a class="code" href="bsp__msp430__defs_8h.html#3ebf7c4fcbf17b618a01df30a79859d3">uint8_t</a> locPort, <a class="code" href="bsp__msp430__defs_8h.html#3ebf7c4fcbf17b618a01df30a79859d3">uint8_t</a> rmtPort, <a class="code" href="nwk__types_8h.html#f8f720dc4ed059245ecf82cd256ffa54">linkID_t</a> *lid)
<a name="l00605"></a>00605 {
<a name="l00606"></a>00606   <a class="code" href="structconnInfo__t.html">connInfo_t</a>   *pCInfo = <a class="code" href="nwk_8c.html#9e18e7021da1508fa2519b6d917dc496">nwk_getNextConnection</a>();
<a name="l00607"></a>00607   <a class="code" href="nwk__types_8h.html#bc3335170bd809d2456c3764595bb41f">smplStatus_t</a>  rc     = <a class="code" href="nwk__types_8h.html#e0b034bf9575c473b7fd4ba5daa0155eea44aa921af7d502aee7df35a86377b7">SMPL_BAD_PARAM</a>;
<a name="l00608"></a>00608 
<a name="l00609"></a>00609   <span class="keywordflow">do</span> {
<a name="l00610"></a>00610     <span class="keywordflow">if</span> (pCInfo)
<a name="l00611"></a>00611     {
<a name="l00612"></a>00612       <span class="comment">/* sanity checks... */</span>
<a name="l00613"></a>00613 
<a name="l00614"></a>00614       <span class="comment">/* Check port info. */</span>
<a name="l00615"></a>00615       <span class="keywordflow">if</span> ((locPort &gt; <a class="code" href="nwk_8h.html#ee2a73792c48cc25a88bf6de860b5f60">SMPL_PORT_STATIC_MAX</a>) || (locPort &lt; (<a class="code" href="nwk_8h.html#ee2a73792c48cc25a88bf6de860b5f60">SMPL_PORT_STATIC_MAX</a> - <a class="code" href="nwk_8h.html#85d57c925b5151ba0b267073fdbc69eb">PORT_USER_STATIC_NUM</a> + 1)))
<a name="l00616"></a>00616       {
<a name="l00617"></a>00617         <span class="keywordflow">continue</span>;
<a name="l00618"></a>00618       }
<a name="l00619"></a>00619 
<a name="l00620"></a>00620       <span class="keywordflow">if</span> ((rmtPort &gt; <a class="code" href="nwk_8h.html#ee2a73792c48cc25a88bf6de860b5f60">SMPL_PORT_STATIC_MAX</a>) || (rmtPort &lt; (<a class="code" href="nwk_8h.html#ee2a73792c48cc25a88bf6de860b5f60">SMPL_PORT_STATIC_MAX</a> - <a class="code" href="nwk_8h.html#85d57c925b5151ba0b267073fdbc69eb">PORT_USER_STATIC_NUM</a> + 1)))
<a name="l00621"></a>00621       {
<a name="l00622"></a>00622         <span class="keywordflow">continue</span>;
<a name="l00623"></a>00623       }
<a name="l00624"></a>00624 
<a name="l00625"></a>00625       <span class="comment">/* Must supply a pointer to the Link ID object */</span>
<a name="l00626"></a>00626       <span class="keywordflow">if</span> (!lid)
<a name="l00627"></a>00627       {
<a name="l00628"></a>00628         <span class="comment">/* No Link ID pointer supplied */</span>
<a name="l00629"></a>00629         <span class="keywordflow">continue</span>;
<a name="l00630"></a>00630       }
<a name="l00631"></a>00631 
<a name="l00632"></a>00632       <span class="comment">/* we're sane */</span>
<a name="l00633"></a>00633 
<a name="l00634"></a>00634       <span class="comment">/* Use the value generated at connection object assign time. */</span>
<a name="l00635"></a>00635       *lid = pCInfo-&gt;<a class="code" href="structconnInfo__t.html#6eb8579357af73f26f41ebabdc174324">thisLinkID</a>;
<a name="l00636"></a>00636 
<a name="l00637"></a>00637       <span class="comment">/* store peer's address */</span>
<a name="l00638"></a>00638       memcpy(pCInfo-&gt;<a class="code" href="structconnInfo__t.html#6cde46f170fc0d98c18803d1819b0255">peerAddr</a>, peerAddr, <a class="code" href="nwk__types_8h.html#e02a66bd1cfdc9b099bcea9b29704a66">NET_ADDR_SIZE</a>);
<a name="l00639"></a>00639 
<a name="l00640"></a>00640       <span class="comment">/* store port info */</span>
<a name="l00641"></a>00641       pCInfo-&gt;<a class="code" href="structconnInfo__t.html#b1b3fe395fb3d073d262e12257bd5b9a">portRx</a> = locPort;
<a name="l00642"></a>00642       pCInfo-&gt;<a class="code" href="structconnInfo__t.html#e914659f839e3915dbdc2cf9b4824cfc">portTx</a> = rmtPort;
<a name="l00643"></a>00643 
<a name="l00644"></a>00644       pCInfo-&gt;<a class="code" href="structconnInfo__t.html#553c558ad464f76f0b09aa691dfc2101">hops2target</a> = <a class="code" href="nwk_8c.html#7c294406bc0bfbcd9cf2171717878f9e">MAX_HOPS</a>;
<a name="l00645"></a>00645 
<a name="l00646"></a>00646       rc = <a class="code" href="nwk__types_8h.html#e0b034bf9575c473b7fd4ba5daa0155e1587bead2fa0982ec696a5dd4458aa56">SMPL_SUCCESS</a>;
<a name="l00647"></a>00647     }
<a name="l00648"></a>00648     <span class="keywordflow">else</span>
<a name="l00649"></a>00649     {
<a name="l00650"></a>00650       <span class="comment">/* No room in Connection table */</span>
<a name="l00651"></a>00651       rc = <a class="code" href="nwk__types_8h.html#e0b034bf9575c473b7fd4ba5daa0155ee401fb249ec01cc76f6354a58612e0bc">SMPL_NOMEM</a>;
<a name="l00652"></a>00652     }
<a name="l00653"></a>00653   } <span class="keywordflow">while</span> (0);
<a name="l00654"></a>00654 
<a name="l00655"></a>00655   <span class="keywordflow">if</span> ((<a class="code" href="nwk__types_8h.html#e0b034bf9575c473b7fd4ba5daa0155e1587bead2fa0982ec696a5dd4458aa56">SMPL_SUCCESS</a> != rc) &amp;&amp; pCInfo)
<a name="l00656"></a>00656   {
<a name="l00657"></a>00657     <a class="code" href="nwk_8c.html#732114731dc51a52a27e4bc120edc5e0">nwk_freeConnection</a>(pCInfo);
<a name="l00658"></a>00658   }
<a name="l00659"></a>00659 
<a name="l00660"></a>00660   <span class="keywordflow">return</span> rc;
<a name="l00661"></a>00661 }
<a name="l00662"></a>00662 <span class="preprocessor">#endif   </span><span class="comment">/* EXTENDED_API */</span>
<a name="l00663"></a>00663 
<a name="l00664"></a>00664 <span class="comment">/******************************************************************************</span>
<a name="l00665"></a>00665 <span class="comment"> * @fn          SMPL_Ioctl</span>
<a name="l00666"></a>00666 <span class="comment"> *</span>
<a name="l00667"></a>00667 <span class="comment"> * @brief       This routine supplies the SimpliciTI IOCTL support.</span>
<a name="l00668"></a>00668 <span class="comment"> *</span>
<a name="l00669"></a>00669 <span class="comment"> * input parameters</span>
<a name="l00670"></a>00670 <span class="comment"> * @param   object   - The IOCTL target object</span>
<a name="l00671"></a>00671 <span class="comment"> * @param   action   - The IOCTL target action on the object</span>
<a name="l00672"></a>00672 <span class="comment"> * @param   val      - pointer to value. exact forn depends on object type.</span>
<a name="l00673"></a>00673 <span class="comment"> *</span>
<a name="l00674"></a>00674 <span class="comment"> * output parameters</span>
<a name="l00675"></a>00675 <span class="comment"> *</span>
<a name="l00676"></a>00676 <span class="comment"> * @return   Status of action. Value depends on object, action, and result.</span>
<a name="l00677"></a>00677 <span class="comment"> *</span>
<a name="l00678"></a>00678 <span class="comment"> *           SMPL_BAD_PARAM is returned if this API is called before</span>
<a name="l00679"></a>00679 <span class="comment"> *                          initialization and the object is not one of</span>
<a name="l00680"></a>00680 <span class="comment"> *                          the valid exceptions.</span>
<a name="l00681"></a>00681 <span class="comment"> */</span>
<a name="l00682"></a><a class="code" href="nwk__api_8h.html#710aaf42045382e819e8da94ce98338d">00682</a> <a class="code" href="nwk__types_8h.html#bc3335170bd809d2456c3764595bb41f">smplStatus_t</a> <a class="code" href="nwk__api_8c.html#065b0f6d38cc2b2bf2f74aff7805a58b">SMPL_Ioctl</a>(<a class="code" href="nwk__types_8h.html#7e7507b5a72d3c7d7980006706258c70">ioctlObject_t</a> object, <a class="code" href="nwk__types_8h.html#b8d599138a632e96c6d7683fa285e6bb">ioctlAction_t</a> action, <span class="keywordtype">void</span> *val)
<a name="l00683"></a>00683 {
<a name="l00684"></a>00684   <a class="code" href="nwk__types_8h.html#bc3335170bd809d2456c3764595bb41f">smplStatus_t</a> rc;
<a name="l00685"></a>00685 
<a name="l00686"></a>00686   <span class="comment">/* if init hasn't occurred see if access is still valid */</span>
<a name="l00687"></a>00687   <span class="keywordflow">if</span> (!sInit_done &amp;&amp; !ioctlPreInitAccessIsOK(object))
<a name="l00688"></a>00688   {
<a name="l00689"></a>00689     <span class="keywordflow">return</span> <a class="code" href="nwk__types_8h.html#e0b034bf9575c473b7fd4ba5daa0155eea44aa921af7d502aee7df35a86377b7">SMPL_BAD_PARAM</a>;
<a name="l00690"></a>00690   }
<a name="l00691"></a>00691 
<a name="l00692"></a>00692   <span class="keywordflow">switch</span> (object)
<a name="l00693"></a>00693   {
<a name="l00694"></a>00694 <span class="preprocessor">#if defined(EXTENDED_API)</span>
<a name="l00695"></a>00695 <span class="preprocessor"></span>    <span class="keywordflow">case</span> <a class="code" href="nwk__types_8h.html#a5bc45cc3d7aa3be43d8a279116522f5b00025b98b75800f2bee88bc0a17045c">IOCTL_OBJ_TOKEN</a>:
<a name="l00696"></a>00696       {
<a name="l00697"></a>00697         <a class="code" href="structioctlToken__t.html">ioctlToken_t</a> *t = (<a class="code" href="structioctlToken__t.html">ioctlToken_t</a> *)val;
<a name="l00698"></a>00698 
<a name="l00699"></a>00699         rc = <a class="code" href="nwk__types_8h.html#e0b034bf9575c473b7fd4ba5daa0155e1587bead2fa0982ec696a5dd4458aa56">SMPL_SUCCESS</a>;
<a name="l00700"></a>00700         <span class="keywordflow">if</span> (<a class="code" href="nwk__types_8h.html#6f56ac6bdc930eee012b199882049513d9a1b9619dba049a3052149359c08c0a">TT_LINK</a> == t-&gt;<a class="code" href="structioctlToken__t.html#68384d8e57678a11c3a8a4fb19682e05">tokenType</a>)
<a name="l00701"></a>00701         {
<a name="l00702"></a>00702           <span class="keywordflow">if</span> (<a class="code" href="nwk__types_8h.html#dce1d6e720abafed7028bb97ea0ebb7043642de02201ab356b763d373ae41701">IOCTL_ACT_SET</a> == action)
<a name="l00703"></a>00703           {
<a name="l00704"></a>00704             <a class="code" href="nwk__link_8c.html#9bb23d7d54e25d5b386fb088a4632a06">nwk_setLinkToken</a>(t-&gt;<a class="code" href="structioctlToken__t.html#35ed11f14e0010509a2d2bf990fdea70">token</a>.<a class="code" href="uniontoken__t.html#32ec34560bf55a16a8ad21664f599b1d">linkToken</a>);
<a name="l00705"></a>00705           }
<a name="l00706"></a>00706           <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="nwk__types_8h.html#dce1d6e720abafed7028bb97ea0ebb706258e2a6a3778bccbd1385a24b009b1f">IOCTL_ACT_GET</a> == action)
<a name="l00707"></a>00707           {
<a name="l00708"></a>00708             <a class="code" href="nwk__link_8c.html#262acab6a07969f6d4845aa8d14e6259">nwk_getLinkToken</a>(&amp;t-&gt;<a class="code" href="structioctlToken__t.html#35ed11f14e0010509a2d2bf990fdea70">token</a>.<a class="code" href="uniontoken__t.html#32ec34560bf55a16a8ad21664f599b1d">linkToken</a>);
<a name="l00709"></a>00709           }
<a name="l00710"></a>00710           <span class="keywordflow">else</span>
<a name="l00711"></a>00711           {
<a name="l00712"></a>00712             rc = <a class="code" href="nwk__types_8h.html#e0b034bf9575c473b7fd4ba5daa0155eea44aa921af7d502aee7df35a86377b7">SMPL_BAD_PARAM</a>;
<a name="l00713"></a>00713           }
<a name="l00714"></a>00714         }
<a name="l00715"></a>00715         <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="nwk__types_8h.html#6f56ac6bdc930eee012b199882049513d2ac633ce25091af7cef905b939348d3">TT_JOIN</a> == t-&gt;<a class="code" href="structioctlToken__t.html#68384d8e57678a11c3a8a4fb19682e05">tokenType</a>)
<a name="l00716"></a>00716         {
<a name="l00717"></a>00717           <span class="keywordflow">if</span> (<a class="code" href="nwk__types_8h.html#dce1d6e720abafed7028bb97ea0ebb7043642de02201ab356b763d373ae41701">IOCTL_ACT_SET</a> == action)
<a name="l00718"></a>00718           {
<a name="l00719"></a>00719             <a class="code" href="nwk__join_8c.html#6e91446226b690200b2292cb4b222d8b">nwk_setJoinToken</a>(t-&gt;<a class="code" href="structioctlToken__t.html#35ed11f14e0010509a2d2bf990fdea70">token</a>.<a class="code" href="uniontoken__t.html#77bcd9fc2f403a303334bb7911c19685">joinToken</a>);
<a name="l00720"></a>00720           }
<a name="l00721"></a>00721           <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="nwk__types_8h.html#dce1d6e720abafed7028bb97ea0ebb706258e2a6a3778bccbd1385a24b009b1f">IOCTL_ACT_GET</a> == action)
<a name="l00722"></a>00722           {
<a name="l00723"></a>00723             <a class="code" href="nwk__join_8c.html#37c58ac67d09aee83912b6b3f0be31ec">nwk_getJoinToken</a>(&amp;t-&gt;<a class="code" href="structioctlToken__t.html#35ed11f14e0010509a2d2bf990fdea70">token</a>.<a class="code" href="uniontoken__t.html#77bcd9fc2f403a303334bb7911c19685">joinToken</a>);
<a name="l00724"></a>00724           }
<a name="l00725"></a>00725           <span class="keywordflow">else</span>
<a name="l00726"></a>00726           {
<a name="l00727"></a>00727             rc = <a class="code" href="nwk__types_8h.html#e0b034bf9575c473b7fd4ba5daa0155eea44aa921af7d502aee7df35a86377b7">SMPL_BAD_PARAM</a>;
<a name="l00728"></a>00728           }
<a name="l00729"></a>00729         }
<a name="l00730"></a>00730         <span class="keywordflow">else</span>
<a name="l00731"></a>00731         {
<a name="l00732"></a>00732           rc = <a class="code" href="nwk__types_8h.html#e0b034bf9575c473b7fd4ba5daa0155eea44aa921af7d502aee7df35a86377b7">SMPL_BAD_PARAM</a>;
<a name="l00733"></a>00733         }
<a name="l00734"></a>00734       }
<a name="l00735"></a>00735       <span class="keywordflow">break</span>;
<a name="l00736"></a>00736 
<a name="l00737"></a>00737     <span class="keywordflow">case</span> <a class="code" href="nwk__types_8h.html#a5bc45cc3d7aa3be43d8a279116522f5234a35406ef72a1f9db141cdeab80199">IOCTL_OBJ_NVOBJ</a>:
<a name="l00738"></a>00738       rc = <a class="code" href="nwk_8c.html#0094aa5b9b8ce8a0122f5aeb2dc3238f">nwk_NVObj</a>(action, (<a class="code" href="structioctlNVObj__t.html">ioctlNVObj_t</a> *)val);
<a name="l00739"></a>00739       <span class="keywordflow">break</span>;
<a name="l00740"></a>00740 <span class="preprocessor">#endif  </span><span class="comment">/* EXTENDED_API */</span>
<a name="l00741"></a>00741 
<a name="l00742"></a>00742     <span class="keywordflow">case</span> <a class="code" href="nwk__types_8h.html#a5bc45cc3d7aa3be43d8a279116522f5299748e00430044552aff4fe9c552d78">IOCTL_OBJ_CONNOBJ</a>:
<a name="l00743"></a>00743       rc = <a class="code" href="nwk__ioctl_8c.html#0d5d694ba743fe69359a8936c6d51138">nwk_connectionControl</a>(action, val);
<a name="l00744"></a>00744       <span class="keywordflow">break</span>;
<a name="l00745"></a>00745 
<a name="l00746"></a>00746     <span class="keywordflow">case</span> <a class="code" href="nwk__types_8h.html#a5bc45cc3d7aa3be43d8a279116522f571835cc13a5364b4c6a5633e6a311bca">IOCTL_OBJ_ADDR</a>:
<a name="l00747"></a>00747       <span class="keywordflow">if</span> ((<a class="code" href="nwk__types_8h.html#dce1d6e720abafed7028bb97ea0ebb706258e2a6a3778bccbd1385a24b009b1f">IOCTL_ACT_GET</a> == action) || (<a class="code" href="nwk__types_8h.html#dce1d6e720abafed7028bb97ea0ebb7043642de02201ab356b763d373ae41701">IOCTL_ACT_SET</a> == action))
<a name="l00748"></a>00748       {
<a name="l00749"></a>00749         rc = <a class="code" href="nwk__ioctl_8c.html#77f61628a54caad076eb60aab1e23bc3">nwk_deviceAddress</a>(action, (<a class="code" href="structaddr__t.html">addr_t</a> *)val);
<a name="l00750"></a>00750       }
<a name="l00751"></a>00751       <span class="keywordflow">else</span>
<a name="l00752"></a>00752       {
<a name="l00753"></a>00753         rc = <a class="code" href="nwk__types_8h.html#e0b034bf9575c473b7fd4ba5daa0155eea44aa921af7d502aee7df35a86377b7">SMPL_BAD_PARAM</a>;
<a name="l00754"></a>00754       }
<a name="l00755"></a>00755       <span class="keywordflow">break</span>;
<a name="l00756"></a>00756 
<a name="l00757"></a>00757     <span class="keywordflow">case</span> <a class="code" href="nwk__types_8h.html#a5bc45cc3d7aa3be43d8a279116522f52a6a80e649b7c8ad1175e8760b09692e">IOCTL_OBJ_RAW_IO</a>:
<a name="l00758"></a>00758       <span class="keywordflow">if</span> (<a class="code" href="nwk__types_8h.html#dce1d6e720abafed7028bb97ea0ebb702ebd36e484f0a86fee70a3989ea41b21">IOCTL_ACT_WRITE</a> == action)
<a name="l00759"></a>00759       {
<a name="l00760"></a>00760         rc = <a class="code" href="nwk__ioctl_8c.html#364cfcd49f15dda7ed5341795ed611d9">nwk_rawSend</a>((<a class="code" href="structioctlRawSend__t.html">ioctlRawSend_t</a> *)val);
<a name="l00761"></a>00761       }
<a name="l00762"></a>00762       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<a class="code" href="nwk__types_8h.html#dce1d6e720abafed7028bb97ea0ebb70af31b3c45665297c3ae528279d60a048">IOCTL_ACT_READ</a> == action)
<a name="l00763"></a>00763       {
<a name="l00764"></a>00764         rc = <a class="code" href="nwk__ioctl_8c.html#5751c57bc3a69532d65def5b24cfed5c">nwk_rawReceive</a>((<a class="code" href="structioctlRawReceive__t.html">ioctlRawReceive_t</a> *)val);
<a name="l00765"></a>00765       }
<a name="l00766"></a>00766       <span class="keywordflow">else</span>
<a name="l00767"></a>00767       {
<a name="l00768"></a>00768         rc = <a class="code" href="nwk__types_8h.html#e0b034bf9575c473b7fd4ba5daa0155eea44aa921af7d502aee7df35a86377b7">SMPL_BAD_PARAM</a>;
<a name="l00769"></a>00769       }
<a name="l00770"></a>00770       <span class="keywordflow">break</span>;
<a name="l00771"></a>00771 
<a name="l00772"></a>00772     <span class="keywordflow">case</span> <a class="code" href="nwk__types_8h.html#a5bc45cc3d7aa3be43d8a279116522f5e02b612bcad5c50e64d3c0b77f5c4eb2">IOCTL_OBJ_RADIO</a>:
<a name="l00773"></a>00773       rc = <a class="code" href="nwk__ioctl_8c.html#3a492c3cfee2a0914e2b23e3582d7813">nwk_radioControl</a>(action, val);
<a name="l00774"></a>00774       <span class="keywordflow">break</span>;
<a name="l00775"></a>00775 
<a name="l00776"></a>00776 <span class="preprocessor">#if defined(ACCESS_POINT)</span>
<a name="l00777"></a>00777 <span class="preprocessor"></span>    <span class="keywordflow">case</span> <a class="code" href="nwk__types_8h.html#a5bc45cc3d7aa3be43d8a279116522f50fce3984886f355703323044cc6cfa9b">IOCTL_OBJ_AP_JOIN</a>:
<a name="l00778"></a>00778       rc = nwk_joinContext(action);
<a name="l00779"></a>00779       <span class="keywordflow">break</span>;
<a name="l00780"></a>00780 <span class="preprocessor">#endif</span>
<a name="l00781"></a>00781 <span class="preprocessor"></span><span class="preprocessor">#if defined(FREQUENCY_AGILITY)</span>
<a name="l00782"></a>00782 <span class="preprocessor"></span>    <span class="keywordflow">case</span> <a class="code" href="nwk__types_8h.html#a5bc45cc3d7aa3be43d8a279116522f5aa500f2c2a54c91ebf6f0acb8c6154c4">IOCTL_OBJ_FREQ</a>:
<a name="l00783"></a>00783       rc = nwk_freqControl(action, val);
<a name="l00784"></a>00784       <span class="keywordflow">break</span>;
<a name="l00785"></a>00785 <span class="preprocessor">#endif</span>
<a name="l00786"></a>00786 <span class="preprocessor"></span>    <span class="keywordflow">case</span> <a class="code" href="nwk__types_8h.html#a5bc45cc3d7aa3be43d8a279116522f5c2e241adb8844f17b42e04c615002f3e">IOCTL_OBJ_FWVER</a>:
<a name="l00787"></a>00787       <span class="keywordflow">if</span> (<a class="code" href="nwk__types_8h.html#dce1d6e720abafed7028bb97ea0ebb706258e2a6a3778bccbd1385a24b009b1f">IOCTL_ACT_GET</a> == action)
<a name="l00788"></a>00788       {
<a name="l00789"></a>00789         memcpy(val, <a class="code" href="nwk__globals_8c.html#51d20e8ddbbb0ebd7d8100666d0a7bfd">nwk_getFWVersion</a>(), <a class="code" href="nwk__types_8h.html#04f3b2eab463171af53820f796e99f6e">SMPL_FWVERSION_SIZE</a>);
<a name="l00790"></a>00790         rc = <a class="code" href="nwk__types_8h.html#e0b034bf9575c473b7fd4ba5daa0155e1587bead2fa0982ec696a5dd4458aa56">SMPL_SUCCESS</a>;
<a name="l00791"></a>00791       }
<a name="l00792"></a>00792       <span class="keywordflow">else</span>
<a name="l00793"></a>00793       {
<a name="l00794"></a>00794         rc = <a class="code" href="nwk__types_8h.html#e0b034bf9575c473b7fd4ba5daa0155eea44aa921af7d502aee7df35a86377b7">SMPL_BAD_PARAM</a>;
<a name="l00795"></a>00795       }
<a name="l00796"></a>00796       <span class="keywordflow">break</span>;
<a name="l00797"></a>00797 
<a name="l00798"></a>00798     <span class="keywordflow">case</span> <a class="code" href="nwk__types_8h.html#a5bc45cc3d7aa3be43d8a279116522f58dbfd68deb8d48269ef467d01eddef47">IOCTL_OBJ_PROTOVER</a>:
<a name="l00799"></a>00799       <span class="keywordflow">if</span> (<a class="code" href="nwk__types_8h.html#dce1d6e720abafed7028bb97ea0ebb706258e2a6a3778bccbd1385a24b009b1f">IOCTL_ACT_GET</a> == action)
<a name="l00800"></a>00800       {
<a name="l00801"></a>00801         *((<a class="code" href="bsp__msp430__defs_8h.html#3ebf7c4fcbf17b618a01df30a79859d3">uint8_t</a> *)val) = <a class="code" href="nwk__globals_8c.html#6230a770c745500aa69ddbce5028b9dc">nwk_getProtocolVersion</a>();
<a name="l00802"></a>00802         rc = <a class="code" href="nwk__types_8h.html#e0b034bf9575c473b7fd4ba5daa0155e1587bead2fa0982ec696a5dd4458aa56">SMPL_SUCCESS</a>;
<a name="l00803"></a>00803       }
<a name="l00804"></a>00804       <span class="keywordflow">else</span>
<a name="l00805"></a>00805       {
<a name="l00806"></a>00806         rc = <a class="code" href="nwk__types_8h.html#e0b034bf9575c473b7fd4ba5daa0155eea44aa921af7d502aee7df35a86377b7">SMPL_BAD_PARAM</a>;
<a name="l00807"></a>00807       }
<a name="l00808"></a>00808       <span class="keywordflow">break</span>;
<a name="l00809"></a>00809 
<a name="l00810"></a>00810     <span class="keywordflow">default</span>:
<a name="l00811"></a>00811       rc = <a class="code" href="nwk__types_8h.html#e0b034bf9575c473b7fd4ba5daa0155eea44aa921af7d502aee7df35a86377b7">SMPL_BAD_PARAM</a>;
<a name="l00812"></a>00812       <span class="keywordflow">break</span>;
<a name="l00813"></a>00813   }
<a name="l00814"></a>00814 
<a name="l00815"></a>00815   <span class="keywordflow">return</span> rc;
<a name="l00816"></a>00816 }
<a name="l00817"></a>00817 
<a name="l00818"></a>00818 <span class="comment">/******************************************************************************</span>
<a name="l00819"></a>00819 <span class="comment"> * @fn          ioctlPreInitAccessIsOK</span>
<a name="l00820"></a>00820 <span class="comment"> *</span>
<a name="l00821"></a>00821 <span class="comment"> * @brief       Is the request legal yet? Most requests are not legal before</span>
<a name="l00822"></a>00822 <span class="comment"> *              SMPL_Init().</span>
<a name="l00823"></a>00823 <span class="comment"> *</span>
<a name="l00824"></a>00824 <span class="comment"> * input parameters</span>
<a name="l00825"></a>00825 <span class="comment"> * @param   object   - The IOCTL target object</span>
<a name="l00826"></a>00826 <span class="comment"> *</span>
<a name="l00827"></a>00827 <span class="comment"> * output parameters</span>
<a name="l00828"></a>00828 <span class="comment"> *</span>
<a name="l00829"></a>00829 <span class="comment"> * @return   Returns non-zero if request should be honored for further</span>
<a name="l00830"></a>00830 <span class="comment"> *           processing, otherwise returns 0. This function does not</span>
<a name="l00831"></a>00831 <span class="comment"> *           determine of the object-action pair are valid. It only knows</span>
<a name="l00832"></a>00832 <span class="comment"> *           about exceptions, i.e., those that are valid before the</span>
<a name="l00833"></a>00833 <span class="comment"> *           SMPL_Init() call.</span>
<a name="l00834"></a>00834 <span class="comment"> *</span>
<a name="l00835"></a>00835 <span class="comment"> */</span>
<a name="l00836"></a>00836 <span class="keyword">static</span> <a class="code" href="bsp__msp430__defs_8h.html#3ebf7c4fcbf17b618a01df30a79859d3">uint8_t</a> ioctlPreInitAccessIsOK(<a class="code" href="nwk__types_8h.html#7e7507b5a72d3c7d7980006706258c70">ioctlObject_t</a> object)
<a name="l00837"></a>00837 {
<a name="l00838"></a>00838   <a class="code" href="bsp__msp430__defs_8h.html#3ebf7c4fcbf17b618a01df30a79859d3">uint8_t</a> rc;
<a name="l00839"></a>00839 
<a name="l00840"></a>00840   <span class="comment">/* Currently the only legal pre-init accesses are the address and</span>
<a name="l00841"></a>00841 <span class="comment">   * the token objects.</span>
<a name="l00842"></a>00842 <span class="comment">   */</span>
<a name="l00843"></a>00843   <span class="keywordflow">switch</span> (object)
<a name="l00844"></a>00844   {
<a name="l00845"></a>00845     <span class="keywordflow">case</span> <a class="code" href="nwk__types_8h.html#a5bc45cc3d7aa3be43d8a279116522f571835cc13a5364b4c6a5633e6a311bca">IOCTL_OBJ_ADDR</a>:
<a name="l00846"></a>00846     <span class="keywordflow">case</span> <a class="code" href="nwk__types_8h.html#a5bc45cc3d7aa3be43d8a279116522f5b00025b98b75800f2bee88bc0a17045c">IOCTL_OBJ_TOKEN</a>:
<a name="l00847"></a>00847       rc = 1;   <span class="comment">/* legal */</span>
<a name="l00848"></a>00848       <span class="keywordflow">break</span>;
<a name="l00849"></a>00849 
<a name="l00850"></a>00850     <span class="keywordflow">default</span>:
<a name="l00851"></a>00851       rc = 0;   <span class="comment">/* not legal when init not done */</span>
<a name="l00852"></a>00852       <span class="keywordflow">break</span>;
<a name="l00853"></a>00853   }
<a name="l00854"></a>00854 
<a name="l00855"></a>00855   <span class="keywordflow">return</span> rc;
<a name="l00856"></a>00856 }
</pre></div><hr size="1"><address style="align: right;"><small>Generated on Thu Mar 29 11:40:05 2012 by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.4.7 </small></address>
</body>
</html>
