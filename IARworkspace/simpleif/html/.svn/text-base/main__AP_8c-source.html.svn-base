<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>Applications/main_AP.c Source File</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.4.7 -->
<div class="tabs">
  <ul>
    <li><a href="index.html"><span>Main&nbsp;Page</span></a></li>
    <li><a href="annotated.html"><span>Classes</span></a></li>
    <li id="current"><a href="files.html"><span>Files</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="files.html"><span>File&nbsp;List</span></a></li>
    <li><a href="globals.html"><span>File&nbsp;Members</span></a></li>
  </ul></div>
<h1>Applications/main_AP.c</h1><a href="main__AP_8c.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">//******************************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">// THIS PROGRAM IS PROVIDED "AS IS". TI MAKES NO WARRANTIES OR</span>
<a name="l00003"></a>00003 <span class="comment">// REPRESENTATIONS, EITHER EXPRESS, IMPLIED OR STATUTORY,</span>
<a name="l00004"></a>00004 <span class="comment">// INCLUDING ANY IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS</span>
<a name="l00005"></a>00005 <span class="comment">// FOR A PARTICULAR PURPOSE, LACK OF VIRUSES, ACCURACY OR</span>
<a name="l00006"></a>00006 <span class="comment">// COMPLETENESS OF RESPONSES, RESULTS AND LACK OF NEGLIGENCE.</span>
<a name="l00007"></a>00007 <span class="comment">// TI DISCLAIMS ANY WARRANTY OF TITLE, QUIET ENJOYMENT, QUIET</span>
<a name="l00008"></a>00008 <span class="comment">// POSSESSION, AND NON-INFRINGEMENT OF ANY THIRD PARTY</span>
<a name="l00009"></a>00009 <span class="comment">// INTELLECTUAL PROPERTY RIGHTS WITH REGARD TO THE PROGRAM OR</span>
<a name="l00010"></a>00010 <span class="comment">// YOUR USE OF THE PROGRAM.</span>
<a name="l00011"></a>00011 <span class="comment">//</span>
<a name="l00012"></a>00012 <span class="comment">// IN NO EVENT SHALL TI BE LIABLE FOR ANY SPECIAL, INCIDENTAL,</span>
<a name="l00013"></a>00013 <span class="comment">// CONSEQUENTIAL OR INDIRECT DAMAGES, HOWEVER CAUSED, ON ANY</span>
<a name="l00014"></a>00014 <span class="comment">// THEORY OF LIABILITY AND WHETHER OR NOT TI HAS BEEN ADVISED</span>
<a name="l00015"></a>00015 <span class="comment">// OF THE POSSIBILITY OF SUCH DAMAGES, ARISING IN ANY WAY OUT</span>
<a name="l00016"></a>00016 <span class="comment">// OF THIS AGREEMENT, THE PROGRAM, OR YOUR USE OF THE PROGRAM.</span>
<a name="l00017"></a>00017 <span class="comment">// EXCLUDED DAMAGES INCLUDE, BUT ARE NOT LIMITED TO, COST OF</span>
<a name="l00018"></a>00018 <span class="comment">// REMOVAL OR REINSTALLATION, COMPUTER TIME, LABOR COSTS, LOSS</span>
<a name="l00019"></a>00019 <span class="comment">// OF GOODWILL, LOSS OF PROFITS, LOSS OF SAVINGS, OR LOSS OF</span>
<a name="l00020"></a>00020 <span class="comment">// USE OR INTERRUPTION OF BUSINESS. IN NO EVENT WILL TI'S</span>
<a name="l00021"></a>00021 <span class="comment">// AGGREGATE LIABILITY UNDER THIS AGREEMENT OR ARISING OUT OF</span>
<a name="l00022"></a>00022 <span class="comment">// YOUR USE OF THE PROGRAM EXCEED FIVE HUNDRED DOLLARS</span>
<a name="l00023"></a>00023 <span class="comment">// (U.S.$500).</span>
<a name="l00024"></a>00024 <span class="comment">//</span>
<a name="l00025"></a>00025 <span class="comment">// Unless otherwise stated, the Program written and copyrighted</span>
<a name="l00026"></a>00026 <span class="comment">// by Texas Instruments is distributed as "freeware".  You may,</span>
<a name="l00027"></a>00027 <span class="comment">// only under TI's copyright in the Program, use and modify the</span>
<a name="l00028"></a>00028 <span class="comment">// Program without any charge or restriction.  You may</span>
<a name="l00029"></a>00029 <span class="comment">// distribute to third parties, provided that you transfer a</span>
<a name="l00030"></a>00030 <span class="comment">// copy of this license to the third party and the third party</span>
<a name="l00031"></a>00031 <span class="comment">// agrees to these terms by its first use of the Program. You</span>
<a name="l00032"></a>00032 <span class="comment">// must reproduce the copyright notice and any other legend of</span>
<a name="l00033"></a>00033 <span class="comment">// ownership on each copy or partial copy, of the Program.</span>
<a name="l00034"></a>00034 <span class="comment">//</span>
<a name="l00035"></a>00035 <span class="comment">// You acknowledge and agree that the Program contains</span>
<a name="l00036"></a>00036 <span class="comment">// copyrighted material, trade secrets and other TI proprietary</span>
<a name="l00037"></a>00037 <span class="comment">// information and is protected by copyright laws,</span>
<a name="l00038"></a>00038 <span class="comment">// international copyright treaties, and trade secret laws, as</span>
<a name="l00039"></a>00039 <span class="comment">// well as other intellectual property laws.  To protect TI's</span>
<a name="l00040"></a>00040 <span class="comment">// rights in the Program, you agree not to decompile, reverse</span>
<a name="l00041"></a>00041 <span class="comment">// engineer, disassemble or otherwise translate any object code</span>
<a name="l00042"></a>00042 <span class="comment">// versions of the Program to a human-readable form.  You agree</span>
<a name="l00043"></a>00043 <span class="comment">// that in no event will you alter, remove or destroy any</span>
<a name="l00044"></a>00044 <span class="comment">// copyright notice included in the Program.  TI reserves all</span>
<a name="l00045"></a>00045 <span class="comment">// rights not specifically granted under this license. Except</span>
<a name="l00046"></a>00046 <span class="comment">// as specifically provided herein, nothing in this agreement</span>
<a name="l00047"></a>00047 <span class="comment">// shall be construed as conferring by implication, estoppel,</span>
<a name="l00048"></a>00048 <span class="comment">// or otherwise, upon you, any license or other right under any</span>
<a name="l00049"></a>00049 <span class="comment">// TI patents, copyrights or trade secrets.</span>
<a name="l00050"></a>00050 <span class="comment">//</span>
<a name="l00051"></a>00051 <span class="comment">// You may not use the Program in non-TI devices.</span>
<a name="l00052"></a>00052 <span class="comment">//</span>
<a name="l00053"></a>00053 <span class="comment">//******************************************************************************</span>
<a name="l00054"></a>00054 <span class="comment">//   eZ430-RF2500 Temperature Sensor Access Point</span>
<a name="l00055"></a>00055 <span class="comment">//</span>
<a name="l00056"></a>00056 <span class="comment">//   Description: This is the Access Point software for the eZ430-2500RF</span>
<a name="l00057"></a>00057 <span class="comment">//                Temperature Sensing demo</span>
<a name="l00058"></a>00058 <span class="comment">//</span>
<a name="l00059"></a>00059 <span class="comment">//</span>
<a name="l00060"></a>00060 <span class="comment">//   Z. Shivers</span>
<a name="l00061"></a>00061 <span class="comment">//   Version    1.05</span>
<a name="l00062"></a>00062 <span class="comment">//   Texas Instruments, Inc</span>
<a name="l00063"></a>00063 <span class="comment">//   July 2010</span>
<a name="l00064"></a>00064 <span class="comment">//     IAR Embedded Workbench Kickstart (Version: 5.10.4)</span>
<a name="l00065"></a>00065 <span class="comment">//     Code Composer Studio (Version 4.1.2.00027)</span>
<a name="l00066"></a>00066 <span class="comment">//******************************************************************************</span>
<a name="l00067"></a>00067 <span class="comment">//Change Log:</span>
<a name="l00068"></a>00068 <span class="comment">//******************************************************************************</span>
<a name="l00069"></a>00069 <span class="comment">//Version:  1.05</span>
<a name="l00070"></a>00070 <span class="comment">//Comments: Added support for various baud rates dependent on CPU frequencies</span>
<a name="l00071"></a>00071 <span class="comment">//Version:  1.04</span>
<a name="l00072"></a>00072 <span class="comment">//Comments: Added support for SimpliciTI 1.1.1</span>
<a name="l00073"></a>00073 <span class="comment">//          Replaced delays with __delay_cycles() instrinsic</span>
<a name="l00074"></a>00074 <span class="comment">//          Added more comments</span>
<a name="l00075"></a>00075 <span class="comment">//Version:  1.03</span>
<a name="l00076"></a>00076 <span class="comment">//Comments: Added support for SimpliciTI 1.1.0</span>
<a name="l00077"></a>00077 <span class="comment">//          Added support for Code Composer Studio</span>
<a name="l00078"></a>00078 <span class="comment">//          Added security (Enabled with -DSMPL_SECURE in smpl_nwk_config.dat)</span>
<a name="l00079"></a>00079 <span class="comment">//          Added acknowledgement (Enabled with -DAPP_AUTO_ACK in smpl_nwk_config.dat)</span>
<a name="l00080"></a>00080 <span class="comment">//          Based the modifications on the AP_as_Data_Hub example code</span>
<a name="l00081"></a>00081 <span class="comment">//Version:  1.02</span>
<a name="l00082"></a>00082 <span class="comment">//Comments: Changed Port toggling to abstract method</span>
<a name="l00083"></a>00083 <span class="comment">//          Removed ToggleLED</span>
<a name="l00084"></a>00084 <span class="comment">//          Fixed comment typos/errors</span>
<a name="l00085"></a>00085 <span class="comment">//          Changed startup string to 1.02</span>
<a name="l00086"></a>00086 <span class="comment">//Version:  1.01</span>
<a name="l00087"></a>00087 <span class="comment">//Comments: Added support for SimpliciTI 1.0.3</span>
<a name="l00088"></a>00088 <span class="comment">//          Changed RSSI read method</span>
<a name="l00089"></a>00089 <span class="comment">//          Added 3 digit temperature output for 100+F</span>
<a name="l00090"></a>00090 <span class="comment">//          Changed startup string to 1.01</span>
<a name="l00091"></a>00091 <span class="comment">//Version:  1.00</span>
<a name="l00092"></a>00092 <span class="comment">//Comments: Initial Release Version</span>
<a name="l00093"></a>00093 <span class="comment">//******************************************************************************</span>
<a name="l00094"></a>00094 <span class="preprocessor">#include &lt;string.h&gt;</span>
<a name="l00095"></a>00095 <span class="preprocessor">#include "<a class="code" href="bsp_8h.html">bsp.h</a>"</span>
<a name="l00096"></a>00096 <span class="preprocessor">#include "<a class="code" href="mrfi_8h.html">mrfi.h</a>"</span>
<a name="l00097"></a>00097 <span class="preprocessor">#include "<a class="code" href="bsp__leds_8h.html">bsp_leds.h</a>"</span>
<a name="l00098"></a>00098 <span class="preprocessor">#include "<a class="code" href="bsp__buttons_8h.html">bsp_buttons.h</a>"</span>
<a name="l00099"></a>00099 <span class="preprocessor">#include "<a class="code" href="nwk__types_8h.html">nwk_types.h</a>"</span>
<a name="l00100"></a>00100 <span class="preprocessor">#include "<a class="code" href="nwk__api_8h.html">nwk_api.h</a>"</span>
<a name="l00101"></a>00101 <span class="preprocessor">#include "<a class="code" href="nwk__frame_8h.html">nwk_frame.h</a>"</span>
<a name="l00102"></a>00102 <span class="preprocessor">#include "<a class="code" href="nwk_8h.html">nwk.h</a>"</span>
<a name="l00103"></a>00103 <span class="preprocessor">#include "<a class="code" href="virtual__com__cmds_8h.html">virtual_com_cmds.h</a>"</span>
<a name="l00104"></a>00104 
<a name="l00105"></a>00105 <span class="comment">/****************** COMMENTS ON ASYNC LISTEN APPLICATION ***********************</span>
<a name="l00106"></a>00106 <span class="comment">Summary:</span>
<a name="l00107"></a>00107 <span class="comment">  This AP build includes implementation of an unknown number of end device peers</span>
<a name="l00108"></a>00108 <span class="comment">  in addition to AP functionality. In this scenario all End Devices establish a</span>
<a name="l00109"></a>00109 <span class="comment">  link to the AP and only to the AP. The AP acts as a data hub. All End Device</span>
<a name="l00110"></a>00110 <span class="comment">  peers are on the AP and not on other distinct ED platforms.</span>
<a name="l00111"></a>00111 <span class="comment"></span>
<a name="l00112"></a>00112 <span class="comment">  There is still a limit to the number of peers supported on the AP that is</span>
<a name="l00113"></a>00113 <span class="comment">  defined by the macro NUM_CONNECTIONS. The AP will support NUM_CONNECTIONS or</span>
<a name="l00114"></a>00114 <span class="comment">  fewer peers but the exact number does not need to be known at build time.</span>
<a name="l00115"></a>00115 <span class="comment"></span>
<a name="l00116"></a>00116 <span class="comment">  In this special but common scenario SimpliciTI restricts each End Device</span>
<a name="l00117"></a>00117 <span class="comment">  object to a single connection to the AP. If multiple logical connections are</span>
<a name="l00118"></a>00118 <span class="comment">  required these must be accommodated by supporting contexts in the application</span>
<a name="l00119"></a>00119 <span class="comment">  payload itself.</span>
<a name="l00120"></a>00120 <span class="comment"></span>
<a name="l00121"></a>00121 <span class="comment">Solution overview:</span>
<a name="l00122"></a>00122 <span class="comment">  When a new peer connection is required the AP main loop must be notified. In</span>
<a name="l00123"></a>00123 <span class="comment">  essence the main loop polls a semaphore to know whether to begin listening for</span>
<a name="l00124"></a>00124 <span class="comment">  a peer Link request from a new End Device. There are two solutions: automatic</span>
<a name="l00125"></a>00125 <span class="comment">  notification and external notification. The only difference between the</span>
<a name="l00126"></a>00126 <span class="comment">  automatic notification solution and the external notification solution is how</span>
<a name="l00127"></a>00127 <span class="comment">  the listen semaphore is set. In the external notification solution the</span>
<a name="l00128"></a>00128 <span class="comment">  sempahore is set by the user when the AP is stimulated for example by a button</span>
<a name="l00129"></a>00129 <span class="comment">  press or a commend over a serial link. In the automatic scheme the</span>
<a name="l00130"></a>00130 <span class="comment">  notification is accomplished as a side effect of a new End Device joining.</span>
<a name="l00131"></a>00131 <span class="comment"></span>
<a name="l00132"></a>00132 <span class="comment">  The Rx callback must be implemented. When the callback is invoked with a</span>
<a name="l00133"></a>00133 <span class="comment">  non-zero Link ID the handler could set a semaphore that alerts the main work</span>
<a name="l00134"></a>00134 <span class="comment">  loop that a SMPL_Receive() can be executed successfully on that Link ID.</span>
<a name="l00135"></a>00135 <span class="comment"></span>
<a name="l00136"></a>00136 <span class="comment">  If the callback conveys an argument (LinkID) of 0 then a new device has joined</span>
<a name="l00137"></a>00137 <span class="comment">  the network. A SMPL_LinkListen() should be executed.</span>
<a name="l00138"></a>00138 <span class="comment"></span>
<a name="l00139"></a>00139 <span class="comment">  Whether the joining device supports ED objects is indirectly inferred on the</span>
<a name="l00140"></a>00140 <span class="comment">  joining device from the setting of the NUM_CONNECTIONS macro. The value of</span>
<a name="l00141"></a>00141 <span class="comment">  this macro should be non-zero only if ED objects exist on the device. This</span>
<a name="l00142"></a>00142 <span class="comment">  macro is always non-zero for ED-only devices. But Range Extenders may or may</span>
<a name="l00143"></a>00143 <span class="comment">  not support ED objects. The macro should be be set to 0 for REs that do not</span>
<a name="l00144"></a>00144 <span class="comment">  also support ED objects. This prevents the Access Point from reserving</span>
<a name="l00145"></a>00145 <span class="comment">  resources for a joinng device that does not support any End Device Objects and</span>
<a name="l00146"></a>00146 <span class="comment">  it prevents the AP from executing a SMPL_LinkListen(). The Access Point will</span>
<a name="l00147"></a>00147 <span class="comment">  not ever see a Link frame if the joining device does not support any</span>
<a name="l00148"></a>00148 <span class="comment">  connections.</span>
<a name="l00149"></a>00149 <span class="comment"></span>
<a name="l00150"></a>00150 <span class="comment">  Each joining device must execute a SMPL_Link() after receiving the join reply</span>
<a name="l00151"></a>00151 <span class="comment">  from the Access Point. The Access Point will be listening.</span>
<a name="l00152"></a>00152 <span class="comment"></span>
<a name="l00153"></a>00153 <span class="comment">******************* END COMMENTS ON ASYNC LISTEN APPLICATION ******************/</span>
<a name="l00154"></a>00154 
<a name="l00155"></a>00155 <span class="comment">/******  THIS SOURCE FILE REPRESENTS THE AUTOMATIC NOTIFICATION SOLUTION ******/</span>
<a name="l00156"></a>00156 
<a name="l00157"></a>00157 <span class="comment">/*------------------------------------------------------------------------------</span>
<a name="l00158"></a>00158 <span class="comment"> * Prototypes</span>
<a name="l00159"></a>00159 <span class="comment"> *----------------------------------------------------------------------------*/</span>
<a name="l00160"></a>00160 <span class="comment">/* Frequency Agility helper functions */</span>
<a name="l00161"></a>00161 <span class="keyword">static</span> <span class="keywordtype">void</span>    checkChangeChannel(<span class="keywordtype">void</span>);
<a name="l00162"></a>00162 <span class="keyword">static</span> <span class="keywordtype">void</span>    changeChannel(<span class="keywordtype">void</span>);
<a name="l00163"></a>00163 
<a name="l00164"></a>00164 __interrupt <span class="keywordtype">void</span> <a class="code" href="main__AP_8c.html#c5afc174bcee77605899348afb5cac0d">ADC10_ISR</a>(<span class="keywordtype">void</span>);
<a name="l00165"></a>00165 __interrupt <span class="keywordtype">void</span> <a class="code" href="main__AP_8c.html#c3eb0ce4a40fb6a40acac10ff3164a8c">Timer_A</a> (<span class="keywordtype">void</span>);
<a name="l00166"></a>00166 
<a name="l00167"></a>00167 <span class="comment">/*------------------------------------------------------------------------------</span>
<a name="l00168"></a>00168 <span class="comment"> * Globals</span>
<a name="l00169"></a>00169 <span class="comment"> *----------------------------------------------------------------------------*/</span>
<a name="l00170"></a>00170 <span class="comment">/* reserve space for the maximum possible peer Link IDs */</span>
<a name="l00171"></a>00171 <span class="keyword">static</span> <a class="code" href="nwk__types_8h.html#f8f720dc4ed059245ecf82cd256ffa54">linkID_t</a> sLID[NUM_CONNECTIONS] = {0};
<a name="l00172"></a>00172 <span class="keyword">static</span> <a class="code" href="bsp__msp430__defs_8h.html#3ebf7c4fcbf17b618a01df30a79859d3">uint8_t</a>  sNumCurrentPeers = 0;
<a name="l00173"></a>00173 
<a name="l00174"></a>00174 <span class="comment">/* callback handler */</span>
<a name="l00175"></a>00175 <span class="keyword">static</span> <a class="code" href="bsp__msp430__defs_8h.html#3ebf7c4fcbf17b618a01df30a79859d3">uint8_t</a> sCB(<a class="code" href="nwk__types_8h.html#f8f720dc4ed059245ecf82cd256ffa54">linkID_t</a>);
<a name="l00176"></a>00176 
<a name="l00177"></a>00177 <span class="comment">/* received message handler */</span>
<a name="l00178"></a>00178 <span class="keyword">static</span> <span class="keywordtype">void</span> processMessage(<a class="code" href="nwk__types_8h.html#f8f720dc4ed059245ecf82cd256ffa54">linkID_t</a>, <a class="code" href="bsp__msp430__defs_8h.html#3ebf7c4fcbf17b618a01df30a79859d3">uint8_t</a> *, <a class="code" href="bsp__msp430__defs_8h.html#3ebf7c4fcbf17b618a01df30a79859d3">uint8_t</a>);
<a name="l00179"></a>00179 
<a name="l00180"></a>00180 <span class="comment">/* work loop semaphores */</span>
<a name="l00181"></a>00181 <span class="keyword">static</span> <span class="keyword">volatile</span> <a class="code" href="bsp__msp430__defs_8h.html#3ebf7c4fcbf17b618a01df30a79859d3">uint8_t</a> sPeerFrameSem = 0;
<a name="l00182"></a>00182 <span class="keyword">static</span> <span class="keyword">volatile</span> <a class="code" href="bsp__msp430__defs_8h.html#3ebf7c4fcbf17b618a01df30a79859d3">uint8_t</a> sJoinSem = 0;
<a name="l00183"></a>00183 <span class="keyword">static</span> <span class="keyword">volatile</span> <a class="code" href="bsp__msp430__defs_8h.html#3ebf7c4fcbf17b618a01df30a79859d3">uint8_t</a> sSelfMeasureSem = 0;
<a name="l00184"></a>00184 
<a name="l00185"></a>00185 <span class="comment">/* blink LEDs when channel changes... */</span>
<a name="l00186"></a>00186 <span class="keyword">static</span> <span class="keyword">volatile</span> <a class="code" href="bsp__msp430__defs_8h.html#3ebf7c4fcbf17b618a01df30a79859d3">uint8_t</a> sBlinky = 0;
<a name="l00187"></a>00187 
<a name="l00188"></a>00188 <span class="comment">/* data for terminal output */</span>
<a name="l00189"></a><a class="code" href="main__AP_8c.html#32ff9b294f3732958c9033be500d70b6">00189</a> <span class="keyword">const</span> <span class="keywordtype">char</span> <a class="code" href="main__AP_8c.html#32ff9b294f3732958c9033be500d70b6">splash</a>[] = {<span class="stringliteral">"\r\n--------------------------------------------------  \r\n     ****\r\n     ****           eZ430-RF2500\r\n     ******o****    Temperature Sensor Network\r\n********_///_****   Copyright 2009\r\n ******/_//_/*****  Texas Instruments Incorporated\r\n  ** ***(__/*****   All rights reserved.\r\n      *********     SimpliciTI1.1.1\r\n       *****\r\n        ***\r\n--------------------------------------------------\r\n"</span>};
<a name="l00190"></a><a class="code" href="main__AP_8c.html#89f39056d7f2ff0eea8102581a1d7c6f">00190</a> <span class="keyword">volatile</span> <span class="keywordtype">int</span> * <a class="code" href="main__AP_8c.html#89f39056d7f2ff0eea8102581a1d7c6f">tempOffset</a> = (<span class="keywordtype">int</span> *)0x10F4;
<a name="l00191"></a>00191 
<a name="l00192"></a>00192 <span class="comment">/*------------------------------------------------------------------------------</span>
<a name="l00193"></a>00193 <span class="comment"> * Frequency Agility support (interference detection)</span>
<a name="l00194"></a>00194 <span class="comment"> *----------------------------------------------------------------------------*/</span>
<a name="l00195"></a>00195 <span class="preprocessor">#ifdef FREQUENCY_AGILITY</span>
<a name="l00196"></a>00196 <span class="preprocessor"></span>
<a name="l00197"></a>00197 <span class="preprocessor">#define INTERFERNCE_THRESHOLD_DBM (-70)</span>
<a name="l00198"></a>00198 <span class="preprocessor"></span><span class="preprocessor">#define SSIZE    25</span>
<a name="l00199"></a>00199 <span class="preprocessor"></span><span class="preprocessor">#define IN_A_ROW  3</span>
<a name="l00200"></a>00200 <span class="preprocessor"></span><span class="keyword">static</span> <a class="code" href="bsp__msp430__defs_8h.html#f3f9a8b2328f92109b6784c2e5e60543">int8_t</a>  sSample[SSIZE];
<a name="l00201"></a>00201 <span class="keyword">static</span> <a class="code" href="bsp__msp430__defs_8h.html#3ebf7c4fcbf17b618a01df30a79859d3">uint8_t</a> sChannel = 0;
<a name="l00202"></a>00202 
<a name="l00203"></a>00203 <span class="preprocessor">#endif  </span><span class="comment">/* FREQUENCY_AGILITY */</span>
<a name="l00204"></a>00204 
<a name="l00205"></a>00205 <span class="comment">/*------------------------------------------------------------------------------</span>
<a name="l00206"></a>00206 <span class="comment"> * Main</span>
<a name="l00207"></a>00207 <span class="comment"> *----------------------------------------------------------------------------*/</span>
<a name="l00208"></a><a class="code" href="main__AP_8c.html#2ad15e973785c942aabc79fc41da633e">00208</a> <span class="keywordtype">void</span> <a class="code" href="main__AP_8c.html#2ad15e973785c942aabc79fc41da633e">main</a> (<span class="keywordtype">void</span>)
<a name="l00209"></a>00209 {
<a name="l00210"></a>00210   <a class="code" href="bsp_8h.html#bc199de9e02e7db55d8102978a467a10">bspIState_t</a> intState;
<a name="l00211"></a>00211 
<a name="l00212"></a>00212 <span class="preprocessor">#ifdef FREQUENCY_AGILITY</span>
<a name="l00213"></a>00213 <span class="preprocessor"></span>  memset(sSample, 0x0, <span class="keyword">sizeof</span>(sSample));
<a name="l00214"></a>00214 <span class="preprocessor">#endif</span>
<a name="l00215"></a>00215 <span class="preprocessor"></span>
<a name="l00216"></a>00216   <span class="comment">/* Initialize board */</span>
<a name="l00217"></a>00217   <a class="code" href="bsp_8c.html#3126b3e5503e839762389cccbe10964c">BSP_Init</a>();
<a name="l00218"></a>00218 
<a name="l00219"></a>00219   <span class="comment">/* Initialize TimerA and oscillator */</span>
<a name="l00220"></a>00220   BCSCTL3 |= LFXT1S_2;                      <span class="comment">// LFXT1 = VLO</span>
<a name="l00221"></a>00221   TACCTL0 = CCIE;                           <span class="comment">// TACCR0 interrupt enabled</span>
<a name="l00222"></a>00222   TACCR0 = 12000;                           <span class="comment">// ~1 second</span>
<a name="l00223"></a>00223   TACTL = TASSEL_1 + MC_1;                  <span class="comment">// ACLK, upmode</span>
<a name="l00224"></a>00224 
<a name="l00225"></a>00225   <span class="comment">/* Initialize serial port */</span>
<a name="l00226"></a>00226   <a class="code" href="virtual__com__cmds_8c.html#1cab866bf2a4559ac5d5f745aedac1ff">COM_Init</a>();
<a name="l00227"></a>00227 
<a name="l00228"></a>00228   <span class="comment">//Transmit splash screen and network init notification</span>
<a name="l00229"></a>00229   <a class="code" href="virtual__com__cmds_8c.html#ba4582f77689b8665ac6d895d4a3665d">TXString</a>( (<span class="keywordtype">char</span>*)<a class="code" href="main__AP_8c.html#32ff9b294f3732958c9033be500d70b6">splash</a>, <span class="keyword">sizeof</span> splash);
<a name="l00230"></a>00230   <a class="code" href="virtual__com__cmds_8c.html#ba4582f77689b8665ac6d895d4a3665d">TXString</a>( <span class="stringliteral">"\r\nInitializing Network...."</span>, 26 );
<a name="l00231"></a>00231 
<a name="l00232"></a>00232   <a class="code" href="nwk__api_8c.html#54a2192999eb505b627f4605ee2be38f">SMPL_Init</a>(sCB);
<a name="l00233"></a>00233 
<a name="l00234"></a>00234   <span class="comment">// network initialized</span>
<a name="l00235"></a>00235   <a class="code" href="virtual__com__cmds_8c.html#ba4582f77689b8665ac6d895d4a3665d">TXString</a>( <span class="stringliteral">"Done\r\n"</span>, 6);
<a name="l00236"></a>00236 
<a name="l00237"></a>00237   <span class="comment">/* green and red LEDs on solid to indicate waiting for a Join. */</span>
<a name="l00238"></a>00238   <a class="code" href="bsp__leds_8h.html#37ff70476f06af9a52fca44ba69dcdd3">BSP_TURN_ON_LED1</a>();
<a name="l00239"></a>00239   <a class="code" href="bsp__leds_8h.html#ac04b2527c6edbfe8c88d5686f254de1">BSP_TURN_ON_LED2</a>();
<a name="l00240"></a>00240 
<a name="l00241"></a>00241   <span class="comment">/* main work loop */</span>
<a name="l00242"></a>00242   <span class="keywordflow">while</span> (1)
<a name="l00243"></a>00243   {
<a name="l00244"></a>00244     <span class="comment">/* Wait for the Join semaphore to be set by the receipt of a Join frame from</span>
<a name="l00245"></a>00245 <span class="comment">     * a device that supports an End Device.</span>
<a name="l00246"></a>00246 <span class="comment">     *</span>
<a name="l00247"></a>00247 <span class="comment">     * An external method could be used as well. A button press could be connected</span>
<a name="l00248"></a>00248 <span class="comment">     * to an ISR and the ISR could set a semaphore that is checked by a function</span>
<a name="l00249"></a>00249 <span class="comment">     * call here, or a command shell running in support of a serial connection</span>
<a name="l00250"></a>00250 <span class="comment">     * could set a semaphore that is checked by a function call.</span>
<a name="l00251"></a>00251 <span class="comment">     */</span>
<a name="l00252"></a>00252     <span class="keywordflow">if</span> (sJoinSem &amp;&amp; (sNumCurrentPeers &lt; NUM_CONNECTIONS))
<a name="l00253"></a>00253     {
<a name="l00254"></a>00254       <span class="comment">/* listen for a new connection */</span>
<a name="l00255"></a>00255       <span class="keywordflow">while</span> (1)
<a name="l00256"></a>00256       {
<a name="l00257"></a>00257         <span class="keywordflow">if</span> (<a class="code" href="nwk__types_8h.html#e0b034bf9575c473b7fd4ba5daa0155e1587bead2fa0982ec696a5dd4458aa56">SMPL_SUCCESS</a> == <a class="code" href="nwk__api_8c.html#8c26f7f7f565e54a53bc49fd82625a1d">SMPL_LinkListen</a>(&amp;sLID[sNumCurrentPeers]))
<a name="l00258"></a>00258         {
<a name="l00259"></a>00259           <span class="keywordflow">break</span>;
<a name="l00260"></a>00260         }
<a name="l00261"></a>00261         <span class="comment">/* Implement fail-to-link policy here. otherwise, listen again. */</span>
<a name="l00262"></a>00262       }
<a name="l00263"></a>00263 
<a name="l00264"></a>00264       sNumCurrentPeers++;
<a name="l00265"></a>00265 
<a name="l00266"></a>00266       <a class="code" href="bsp_8h.html#cc8a16bd9502874026350e36c456fb43">BSP_ENTER_CRITICAL_SECTION</a>(intState);
<a name="l00267"></a>00267       sJoinSem--;
<a name="l00268"></a>00268       <a class="code" href="bsp_8h.html#fccdb2feb4a61479a88b2e6a82e85426">BSP_EXIT_CRITICAL_SECTION</a>(intState);
<a name="l00269"></a>00269     }
<a name="l00270"></a>00270 
<a name="l00271"></a>00271 
<a name="l00272"></a>00272     <span class="comment">// if it is time to measure our own temperature...</span>
<a name="l00273"></a>00273     <span class="keywordflow">if</span>(sSelfMeasureSem)
<a name="l00274"></a>00274     {
<a name="l00275"></a>00275       <span class="keywordtype">char</span> msg [6];
<a name="l00276"></a>00276       <span class="keywordtype">char</span> addr[] = {<span class="stringliteral">"HUB0"</span>};
<a name="l00277"></a>00277       <span class="keywordtype">char</span> rssi[] = {<span class="stringliteral">"000"</span>};
<a name="l00278"></a>00278       <span class="keywordtype">int</span> degC, volt;
<a name="l00279"></a>00279       <span class="keyword">volatile</span> <span class="keywordtype">long</span> temp;
<a name="l00280"></a>00280       <span class="keywordtype">int</span> results[2];
<a name="l00281"></a>00281 
<a name="l00282"></a>00282       <span class="comment">/* Get temperature */</span>
<a name="l00283"></a>00283       ADC10CTL1 = INCH_10 + ADC10DIV_4;       <span class="comment">// Temp Sensor ADC10CLK/5</span>
<a name="l00284"></a>00284       ADC10CTL0 = SREF_1 + ADC10SHT_3 + REFON + ADC10ON + ADC10IE + ADC10SR;
<a name="l00285"></a>00285       <span class="comment">/* Allow ref voltage to settle for at least 30us (30us * 8MHz = 240 cycles)</span>
<a name="l00286"></a>00286 <span class="comment">       * See SLAS504D for settling time spec</span>
<a name="l00287"></a>00287 <span class="comment">       */</span>
<a name="l00288"></a>00288       __delay_cycles(240);
<a name="l00289"></a>00289       ADC10CTL0 |= ENC + ADC10SC;             <span class="comment">// Sampling and conversion start</span>
<a name="l00290"></a>00290       __bis_SR_register(CPUOFF + GIE);        <span class="comment">// LPM0 with interrupts enabled</span>
<a name="l00291"></a>00291       results[0] = ADC10MEM;                  <span class="comment">// Retrieve result</span>
<a name="l00292"></a>00292       ADC10CTL0 &amp;= ~ENC;
<a name="l00293"></a>00293 
<a name="l00294"></a>00294       <span class="comment">/* Get voltage */</span>
<a name="l00295"></a>00295       ADC10CTL1 = INCH_11;                     <span class="comment">// AVcc/2</span>
<a name="l00296"></a>00296       ADC10CTL0 = SREF_1 + ADC10SHT_2 + REFON + ADC10ON + ADC10IE + REF2_5V;
<a name="l00297"></a>00297       __delay_cycles(240);
<a name="l00298"></a>00298       ADC10CTL0 |= ENC + ADC10SC;             <span class="comment">// Sampling and conversion start</span>
<a name="l00299"></a>00299       __bis_SR_register(CPUOFF + GIE);        <span class="comment">// LPM0 with interrupts enabled</span>
<a name="l00300"></a>00300       results[1] = ADC10MEM;                  <span class="comment">// Retrieve result</span>
<a name="l00301"></a>00301 
<a name="l00302"></a>00302       <span class="comment">/* Stop and turn off ADC */</span>
<a name="l00303"></a>00303       ADC10CTL0 &amp;= ~ENC;
<a name="l00304"></a>00304       ADC10CTL0 &amp;= ~(REFON + ADC10ON);
<a name="l00305"></a>00305 
<a name="l00306"></a>00306       <span class="comment">/* oC = ((A10/1024)*1500mV)-986mV)*1/3.55mV = A10*423/1024 - 278</span>
<a name="l00307"></a>00307 <span class="comment">       * the temperature is transmitted as an integer where 32.1 = 321</span>
<a name="l00308"></a>00308 <span class="comment">       * hence 4230 instead of 423</span>
<a name="l00309"></a>00309 <span class="comment">       */</span>
<a name="l00310"></a>00310       temp = results[0];
<a name="l00311"></a>00311       degC = ((temp - 673) * 4230) / 1024;
<a name="l00312"></a>00312       <span class="keywordflow">if</span>( (*<a class="code" href="main__AP_8c.html#89f39056d7f2ff0eea8102581a1d7c6f">tempOffset</a>) != 0xFFFF )
<a name="l00313"></a>00313       {
<a name="l00314"></a>00314         degC += (*<a class="code" href="main__AP_8c.html#89f39056d7f2ff0eea8102581a1d7c6f">tempOffset</a>);
<a name="l00315"></a>00315       }
<a name="l00316"></a>00316 
<a name="l00317"></a>00317       temp = results[1];
<a name="l00318"></a>00318       volt = (temp*25)/512;
<a name="l00319"></a>00319 
<a name="l00320"></a>00320       <span class="comment">/* Package up the data */</span>
<a name="l00321"></a>00321       msg[0] = degC&amp;0xFF;
<a name="l00322"></a>00322       msg[1] = (degC&gt;&gt;8)&amp;0xFF;
<a name="l00323"></a>00323       msg[2] = volt;
<a name="l00324"></a>00324 
<a name="l00325"></a>00325       <span class="comment">/* Send it over serial port */</span>
<a name="l00326"></a>00326       <a class="code" href="virtual__com__cmds_8c.html#8941b8fc06d7c761a6d2440cc6cebed1">transmitDataString</a>(1, addr, rssi, msg );
<a name="l00327"></a>00327 
<a name="l00328"></a>00328       <a class="code" href="bsp__leds_8h.html#a89b9f93f34b70dac4b48c846bca04fc">BSP_TOGGLE_LED1</a>();
<a name="l00329"></a>00329 
<a name="l00330"></a>00330       <span class="comment">/* Done with measurement, disable measure flag */</span>
<a name="l00331"></a>00331       sSelfMeasureSem = 0;
<a name="l00332"></a>00332     }
<a name="l00333"></a>00333 
<a name="l00334"></a>00334     <span class="comment">/* Have we received a frame on one of the ED connections?</span>
<a name="l00335"></a>00335 <span class="comment">     * No critical section -- it doesn't really matter much if we miss a poll</span>
<a name="l00336"></a>00336 <span class="comment">     */</span>
<a name="l00337"></a>00337     <span class="keywordflow">if</span> (sPeerFrameSem)
<a name="l00338"></a>00338     {
<a name="l00339"></a>00339       <a class="code" href="bsp__msp430__defs_8h.html#3ebf7c4fcbf17b618a01df30a79859d3">uint8_t</a>     msg[MAX_APP_PAYLOAD], len, i;
<a name="l00340"></a>00340 
<a name="l00341"></a>00341       <span class="comment">/* process all frames waiting */</span>
<a name="l00342"></a>00342       <span class="keywordflow">for</span> (i=0; i&lt;sNumCurrentPeers; ++i)
<a name="l00343"></a>00343       {
<a name="l00344"></a>00344         <span class="keywordflow">if</span> (<a class="code" href="nwk__types_8h.html#e0b034bf9575c473b7fd4ba5daa0155e1587bead2fa0982ec696a5dd4458aa56">SMPL_SUCCESS</a> == <a class="code" href="nwk__api_8c.html#ad414563a9625de042943cee47659190">SMPL_Receive</a>(sLID[i], msg, &amp;len))
<a name="l00345"></a>00345         {
<a name="l00346"></a>00346           <a class="code" href="structioctlRadioSiginfo__t.html">ioctlRadioSiginfo_t</a> sigInfo;
<a name="l00347"></a>00347 
<a name="l00348"></a>00348           processMessage(sLID[i], msg, len);
<a name="l00349"></a>00349 
<a name="l00350"></a>00350           sigInfo.lid = sLID[i];
<a name="l00351"></a>00351 
<a name="l00352"></a>00352           <a class="code" href="nwk__api_8c.html#065b0f6d38cc2b2bf2f74aff7805a58b">SMPL_Ioctl</a>(<a class="code" href="nwk__types_8h.html#a5bc45cc3d7aa3be43d8a279116522f5e02b612bcad5c50e64d3c0b77f5c4eb2">IOCTL_OBJ_RADIO</a>, <a class="code" href="nwk__types_8h.html#dce1d6e720abafed7028bb97ea0ebb704d2c977520991149f1766b22461503da">IOCTL_ACT_RADIO_SIGINFO</a>, (<span class="keywordtype">void</span> *)&amp;sigInfo);
<a name="l00353"></a>00353 
<a name="l00354"></a>00354           <a class="code" href="virtual__com__cmds_8c.html#0d4cc479fe9130a76ebbf38987eea8d6">transmitData</a>( i, sigInfo.sigInfo.rssi, (<span class="keywordtype">char</span>*)msg );
<a name="l00355"></a>00355           <a class="code" href="bsp__leds_8h.html#a300a2ce95d70071cfacfc9939a67e41">BSP_TOGGLE_LED2</a>();
<a name="l00356"></a>00356 
<a name="l00357"></a>00357           <a class="code" href="bsp_8h.html#cc8a16bd9502874026350e36c456fb43">BSP_ENTER_CRITICAL_SECTION</a>(intState);
<a name="l00358"></a>00358           sPeerFrameSem--;
<a name="l00359"></a>00359           <a class="code" href="bsp_8h.html#fccdb2feb4a61479a88b2e6a82e85426">BSP_EXIT_CRITICAL_SECTION</a>(intState);
<a name="l00360"></a>00360         }
<a name="l00361"></a>00361       }
<a name="l00362"></a>00362     }
<a name="l00363"></a>00363     <span class="keywordflow">if</span> (<a class="code" href="bsp__buttons_8h.html#e77dd23a6594c181dec217d796aabfd6">BSP_BUTTON1</a>())
<a name="l00364"></a>00364     {
<a name="l00365"></a>00365       __delay_cycles(2000000);  <span class="comment">/* debounce (0.25 seconds) */</span>
<a name="l00366"></a>00366       changeChannel();
<a name="l00367"></a>00367     }
<a name="l00368"></a>00368     <span class="keywordflow">else</span>
<a name="l00369"></a>00369     {
<a name="l00370"></a>00370       checkChangeChannel();
<a name="l00371"></a>00371     }
<a name="l00372"></a>00372     <a class="code" href="bsp_8h.html#cc8a16bd9502874026350e36c456fb43">BSP_ENTER_CRITICAL_SECTION</a>(intState);
<a name="l00373"></a>00373     <span class="keywordflow">if</span> (sBlinky)
<a name="l00374"></a>00374     {
<a name="l00375"></a>00375       <span class="keywordflow">if</span> (++sBlinky &gt;= 0xF)
<a name="l00376"></a>00376       {
<a name="l00377"></a>00377         sBlinky = 1;
<a name="l00378"></a>00378         <a class="code" href="bsp__leds_8h.html#a89b9f93f34b70dac4b48c846bca04fc">BSP_TOGGLE_LED1</a>();
<a name="l00379"></a>00379         <a class="code" href="bsp__leds_8h.html#a300a2ce95d70071cfacfc9939a67e41">BSP_TOGGLE_LED2</a>();
<a name="l00380"></a>00380       }
<a name="l00381"></a>00381     }
<a name="l00382"></a>00382     <a class="code" href="bsp_8h.html#fccdb2feb4a61479a88b2e6a82e85426">BSP_EXIT_CRITICAL_SECTION</a>(intState);
<a name="l00383"></a>00383   }
<a name="l00384"></a>00384 
<a name="l00385"></a>00385 }
<a name="l00386"></a>00386 
<a name="l00387"></a>00387 <span class="comment">/* Runs in ISR context. Reading the frame should be done in the */</span>
<a name="l00388"></a>00388 <span class="comment">/* application thread not in the ISR thread. */</span>
<a name="l00389"></a>00389 <span class="keyword">static</span> <a class="code" href="bsp__msp430__defs_8h.html#3ebf7c4fcbf17b618a01df30a79859d3">uint8_t</a> sCB(<a class="code" href="nwk__types_8h.html#f8f720dc4ed059245ecf82cd256ffa54">linkID_t</a> lid)
<a name="l00390"></a>00390 {
<a name="l00391"></a>00391   <span class="keywordflow">if</span> (lid)
<a name="l00392"></a>00392   {
<a name="l00393"></a>00393     sPeerFrameSem++;
<a name="l00394"></a>00394     sBlinky = 0;
<a name="l00395"></a>00395   }
<a name="l00396"></a>00396   <span class="keywordflow">else</span>
<a name="l00397"></a>00397   {
<a name="l00398"></a>00398     sJoinSem++;
<a name="l00399"></a>00399   }
<a name="l00400"></a>00400 
<a name="l00401"></a>00401   <span class="comment">/* leave frame to be read by application. */</span>
<a name="l00402"></a>00402   <span class="keywordflow">return</span> 0;
<a name="l00403"></a>00403 }
<a name="l00404"></a>00404 
<a name="l00405"></a>00405 <span class="keyword">static</span> <span class="keywordtype">void</span> processMessage(<a class="code" href="nwk__types_8h.html#f8f720dc4ed059245ecf82cd256ffa54">linkID_t</a> lid, <a class="code" href="bsp__msp430__defs_8h.html#3ebf7c4fcbf17b618a01df30a79859d3">uint8_t</a> *msg, <a class="code" href="bsp__msp430__defs_8h.html#3ebf7c4fcbf17b618a01df30a79859d3">uint8_t</a> len)
<a name="l00406"></a>00406 {
<a name="l00407"></a>00407   <span class="comment">/* do something useful */</span>
<a name="l00408"></a>00408   <span class="keywordflow">if</span> (len)
<a name="l00409"></a>00409   {
<a name="l00410"></a>00410     <a class="code" href="bsp__leds_8h.html#a89b9f93f34b70dac4b48c846bca04fc">BSP_TOGGLE_LED1</a>();
<a name="l00411"></a>00411   }
<a name="l00412"></a>00412   <span class="keywordflow">return</span>;
<a name="l00413"></a>00413 }
<a name="l00414"></a>00414 
<a name="l00415"></a>00415 <span class="keyword">static</span> <span class="keywordtype">void</span> changeChannel(<span class="keywordtype">void</span>)
<a name="l00416"></a>00416 {
<a name="l00417"></a>00417 <span class="preprocessor">#ifdef FREQUENCY_AGILITY</span>
<a name="l00418"></a>00418 <span class="preprocessor"></span>  <a class="code" href="structfreqEntry__t.html">freqEntry_t</a> freq;
<a name="l00419"></a>00419 
<a name="l00420"></a>00420   <span class="keywordflow">if</span> (++sChannel &gt;= <a class="code" href="nwk__types_8h.html#a78d41db02d286d468b8b47e8a920434">NWK_FREQ_TBL_SIZE</a>)
<a name="l00421"></a>00421   {
<a name="l00422"></a>00422     sChannel = 0;
<a name="l00423"></a>00423   }
<a name="l00424"></a>00424   freq.<a class="code" href="structfreqEntry__t.html#7c1a4ee72d258639e21e7ea6a139f7ad">logicalChan</a> = sChannel;
<a name="l00425"></a>00425   <a class="code" href="nwk__api_8c.html#065b0f6d38cc2b2bf2f74aff7805a58b">SMPL_Ioctl</a>(<a class="code" href="nwk__types_8h.html#a5bc45cc3d7aa3be43d8a279116522f5aa500f2c2a54c91ebf6f0acb8c6154c4">IOCTL_OBJ_FREQ</a>, <a class="code" href="nwk__types_8h.html#dce1d6e720abafed7028bb97ea0ebb7043642de02201ab356b763d373ae41701">IOCTL_ACT_SET</a>, &amp;freq);
<a name="l00426"></a>00426   <a class="code" href="bsp__leds_8h.html#e0bc77f2f0a8abd24299bffb7783418b">BSP_TURN_OFF_LED1</a>();
<a name="l00427"></a>00427   <a class="code" href="bsp__leds_8h.html#e292df6398d149a8c4aad27158984a87">BSP_TURN_OFF_LED2</a>();
<a name="l00428"></a>00428   sBlinky = 1;
<a name="l00429"></a>00429 <span class="preprocessor">#endif</span>
<a name="l00430"></a>00430 <span class="preprocessor"></span>  <span class="keywordflow">return</span>;
<a name="l00431"></a>00431 }
<a name="l00432"></a>00432 
<a name="l00433"></a>00433 <span class="comment">/* implement auto-channel-change policy here... */</span>
<a name="l00434"></a>00434 <span class="keyword">static</span> <span class="keywordtype">void</span> checkChangeChannel(<span class="keywordtype">void</span>)
<a name="l00435"></a>00435 {
<a name="l00436"></a>00436 <span class="preprocessor">#ifdef FREQUENCY_AGILITY</span>
<a name="l00437"></a>00437 <span class="preprocessor"></span>  <a class="code" href="bsp__msp430__defs_8h.html#f3f9a8b2328f92109b6784c2e5e60543">int8_t</a> dbm, inARow = 0;
<a name="l00438"></a>00438 
<a name="l00439"></a>00439   <a class="code" href="bsp__msp430__defs_8h.html#3ebf7c4fcbf17b618a01df30a79859d3">uint8_t</a> i;
<a name="l00440"></a>00440 
<a name="l00441"></a>00441   memset(sSample, 0x0, SSIZE);
<a name="l00442"></a>00442   <span class="keywordflow">for</span> (i=0; i&lt;SSIZE; ++i)
<a name="l00443"></a>00443   {
<a name="l00444"></a>00444     <span class="comment">/* quit if we need to service an app frame */</span>
<a name="l00445"></a>00445     <span class="keywordflow">if</span> (sPeerFrameSem || sJoinSem)
<a name="l00446"></a>00446     {
<a name="l00447"></a>00447       <span class="keywordflow">return</span>;
<a name="l00448"></a>00448     }
<a name="l00449"></a>00449     <a class="code" href="nwk__types_8h.html#192a02d5e3eed6c6b54dcdd7cf45cd77">NWK_DELAY</a>(1);
<a name="l00450"></a>00450     <a class="code" href="nwk__api_8c.html#065b0f6d38cc2b2bf2f74aff7805a58b">SMPL_Ioctl</a>(<a class="code" href="nwk__types_8h.html#a5bc45cc3d7aa3be43d8a279116522f5e02b612bcad5c50e64d3c0b77f5c4eb2">IOCTL_OBJ_RADIO</a>, <a class="code" href="nwk__types_8h.html#dce1d6e720abafed7028bb97ea0ebb70f1646143210fadb6f2e030f224783eac">IOCTL_ACT_RADIO_RSSI</a>, (<span class="keywordtype">void</span> *)&amp;dbm);
<a name="l00451"></a>00451     sSample[i] = dbm;
<a name="l00452"></a>00452 
<a name="l00453"></a>00453     <span class="keywordflow">if</span> (dbm &gt; INTERFERNCE_THRESHOLD_DBM)
<a name="l00454"></a>00454     {
<a name="l00455"></a>00455       <span class="keywordflow">if</span> (++inARow == IN_A_ROW)
<a name="l00456"></a>00456       {
<a name="l00457"></a>00457         changeChannel();
<a name="l00458"></a>00458         <span class="keywordflow">break</span>;
<a name="l00459"></a>00459       }
<a name="l00460"></a>00460     }
<a name="l00461"></a>00461     <span class="keywordflow">else</span>
<a name="l00462"></a>00462     {
<a name="l00463"></a>00463       inARow = 0;
<a name="l00464"></a>00464     }
<a name="l00465"></a>00465   }
<a name="l00466"></a>00466 <span class="preprocessor">#endif</span>
<a name="l00467"></a>00467 <span class="preprocessor"></span>  <span class="keywordflow">return</span>;
<a name="l00468"></a>00468 }
<a name="l00469"></a>00469 
<a name="l00470"></a>00470 <span class="comment">/*------------------------------------------------------------------------------</span>
<a name="l00471"></a>00471 <span class="comment">* ADC10 interrupt service routine</span>
<a name="l00472"></a>00472 <span class="comment">------------------------------------------------------------------------------*/</span>
<a name="l00473"></a>00473 <span class="preprocessor">#pragma vector=ADC10_VECTOR</span>
<a name="l00474"></a><a class="code" href="main__AP_8c.html#c5afc174bcee77605899348afb5cac0d">00474</a> <span class="preprocessor"></span>__interrupt <span class="keywordtype">void</span> <a class="code" href="main__AP_8c.html#c5afc174bcee77605899348afb5cac0d">ADC10_ISR</a>(<span class="keywordtype">void</span>)
<a name="l00475"></a>00475 {
<a name="l00476"></a>00476   __bic_SR_register_on_exit(CPUOFF);        <span class="comment">// Clear CPUOFF bit from 0(SR)</span>
<a name="l00477"></a>00477 }
<a name="l00478"></a>00478 
<a name="l00479"></a>00479 <span class="comment">/*------------------------------------------------------------------------------</span>
<a name="l00480"></a>00480 <span class="comment">* Timer A0 interrupt service routine</span>
<a name="l00481"></a>00481 <span class="comment">------------------------------------------------------------------------------*/</span>
<a name="l00482"></a>00482 <span class="preprocessor">#pragma vector=TIMERA0_VECTOR</span>
<a name="l00483"></a><a class="code" href="main__AP_8c.html#c3eb0ce4a40fb6a40acac10ff3164a8c">00483</a> <span class="preprocessor"></span>__interrupt <span class="keywordtype">void</span> <a class="code" href="main__AP_8c.html#c3eb0ce4a40fb6a40acac10ff3164a8c">Timer_A</a> (<span class="keywordtype">void</span>)
<a name="l00484"></a>00484 {
<a name="l00485"></a>00485   sSelfMeasureSem = 1;
<a name="l00486"></a>00486 }
</pre></div><hr size="1"><address style="align: right;"><small>Generated on Thu Mar 29 11:40:05 2012 by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.4.7 </small></address>
</body>
</html>
