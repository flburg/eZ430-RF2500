<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>Applications/virtual_com_cmds.c Source File</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.4.7 -->
<div class="tabs">
  <ul>
    <li><a href="index.html"><span>Main&nbsp;Page</span></a></li>
    <li><a href="annotated.html"><span>Classes</span></a></li>
    <li id="current"><a href="files.html"><span>Files</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="files.html"><span>File&nbsp;List</span></a></li>
    <li><a href="globals.html"><span>File&nbsp;Members</span></a></li>
  </ul></div>
<h1>Applications/virtual_com_cmds.c</h1><a href="virtual__com__cmds_8c.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*----------------------------------------------------------------------------</span>
<a name="l00002"></a>00002 <span class="comment"> *  Demo Application for SimpliciTI</span>
<a name="l00003"></a>00003 <span class="comment"> *</span>
<a name="l00004"></a>00004 <span class="comment"> *  L. Friedman</span>
<a name="l00005"></a>00005 <span class="comment"> *  Texas Instruments, Inc.</span>
<a name="l00006"></a>00006 <span class="comment"> *----------------------------------------------------------------------------</span>
<a name="l00007"></a>00007 <span class="comment"> */</span>
<a name="l00008"></a>00008 
<a name="l00009"></a>00009 <span class="comment">/**********************************************************************************************</span>
<a name="l00010"></a>00010 <span class="comment">  Copyright 2007-2009 Texas Instruments Incorporated. All rights reserved.</span>
<a name="l00011"></a>00011 <span class="comment"></span>
<a name="l00012"></a>00012 <span class="comment">  IMPORTANT: Your use of this Software is limited to those specific rights granted under</span>
<a name="l00013"></a>00013 <span class="comment">  the terms of a software license agreement between the user who downloaded the software,</span>
<a name="l00014"></a>00014 <span class="comment">  his/her employer (which must be your employer) and Texas Instruments Incorporated (the</span>
<a name="l00015"></a>00015 <span class="comment">  "License"). You may not use this Software unless you agree to abide by the terms of the</span>
<a name="l00016"></a>00016 <span class="comment">  License. The License limits your use, and you acknowledge, that the Software may not be</span>
<a name="l00017"></a>00017 <span class="comment">  modified, copied or distributed unless embedded on a Texas Instruments microcontroller</span>
<a name="l00018"></a>00018 <span class="comment">  or used solely and exclusively in conjunction with a Texas Instruments radio frequency</span>
<a name="l00019"></a>00019 <span class="comment">  transceiver, which is integrated into your product. Other than for the foregoing purpose,</span>
<a name="l00020"></a>00020 <span class="comment">  you may not use, reproduce, copy, prepare derivative works of, modify, distribute,</span>
<a name="l00021"></a>00021 <span class="comment">  perform, display or sell this Software and/or its documentation for any purpose.</span>
<a name="l00022"></a>00022 <span class="comment"></span>
<a name="l00023"></a>00023 <span class="comment">  YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE PROVIDED “AS IS”</span>
<a name="l00024"></a>00024 <span class="comment">  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION, ANY</span>
<a name="l00025"></a>00025 <span class="comment">  WARRANTY OF MERCHANTABILITY, TITLE, NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE.</span>
<a name="l00026"></a>00026 <span class="comment">  IN NO EVENT SHALL TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,</span>
<a name="l00027"></a>00027 <span class="comment">  NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER LEGAL EQUITABLE</span>
<a name="l00028"></a>00028 <span class="comment">  THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES INCLUDING BUT NOT LIMITED TO ANY</span>
<a name="l00029"></a>00029 <span class="comment">  INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST</span>
<a name="l00030"></a>00030 <span class="comment">  DATA, COST OF PROCUREMENT OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY</span>
<a name="l00031"></a>00031 <span class="comment">  THIRD PARTIES (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.</span>
<a name="l00032"></a>00032 <span class="comment"></span>
<a name="l00033"></a>00033 <span class="comment">  Should you have any questions regarding your right to use this Software,</span>
<a name="l00034"></a>00034 <span class="comment">  contact Texas Instruments Incorporated at www.TI.com.</span>
<a name="l00035"></a>00035 <span class="comment">**************************************************************************************************/</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &lt;string.h&gt;</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include "<a class="code" href="bsp_8h.html">bsp.h</a>"</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include "<a class="code" href="virtual__com__cmds_8h.html">virtual_com_cmds.h</a>"</span>
<a name="l00039"></a>00039 
<a name="l00040"></a>00040 <span class="keyword">static</span> <span class="keywordtype">char</span> verboseMode = 1;
<a name="l00041"></a>00041 <span class="keyword">static</span> <span class="keywordtype">char</span> degCMode = 0;
<a name="l00042"></a>00042 
<a name="l00043"></a>00043 <span class="comment">/******************************************************************************/</span>
<a name="l00044"></a>00044 <span class="comment">// End Virtual Com Port Communication</span>
<a name="l00045"></a>00045 <span class="comment">/******************************************************************************/</span>
<a name="l00046"></a><a class="code" href="virtual__com__cmds_8h.html#9e0e08cef3fb4c7a848d4b88f03dc376">00046</a> <span class="keywordtype">void</span> <a class="code" href="virtual__com__cmds_8c.html#1cab866bf2a4559ac5d5f745aedac1ff">COM_Init</a>()
<a name="l00047"></a>00047 {
<a name="l00048"></a>00048   P3SEL |= 0x30;                            <span class="comment">// P3.4,5 = USCI_A0 TXD/RXD</span>
<a name="l00049"></a>00049   UCA0CTL1 = UCSSEL_2;                      <span class="comment">// SMCLK</span>
<a name="l00050"></a>00050 
<a name="l00051"></a>00051 <span class="preprocessor">#if (BSP_CONFIG_CLOCK_MHZ_SELECT == 1)</span>
<a name="l00052"></a>00052 <span class="preprocessor"></span>  UCA0BR0 = 104;                            <span class="comment">// 9600 from 1Mhz</span>
<a name="l00053"></a>00053   UCA0BR1 = 0;
<a name="l00054"></a>00054   UCA0MCTL = UCBRS_1;
<a name="l00055"></a>00055 <span class="preprocessor">#elif (BSP_CONFIG_CLOCK_MHZ_SELECT == 2)</span>
<a name="l00056"></a>00056 <span class="preprocessor"></span>  UCA0BR0 = 0xDA;                           <span class="comment">// 9600 from 2Mhz</span>
<a name="l00057"></a>00057   UCA0BR1 = 0x0;
<a name="l00058"></a>00058   UCA0MCTL = UCBRS_6;
<a name="l00059"></a>00059 <span class="preprocessor">#elif (BSP_CONFIG_CLOCK_MHZ_SELECT == 4)</span>
<a name="l00060"></a>00060 <span class="preprocessor"></span>  UCA0BR0 = 0xA0;                           <span class="comment">// 9600 from 4Mhz</span>
<a name="l00061"></a>00061   UCA0BR1 = 0x1;
<a name="l00062"></a>00062   UCA0MCTL = UCBRS_6;
<a name="l00063"></a>00063 <span class="preprocessor">#elif (BSP_CONFIG_CLOCK_MHZ_SELECT == 6)</span>
<a name="l00064"></a>00064 <span class="preprocessor"></span>  UCA0BR0 = 0x7B;                           <span class="comment">// 9600 from 6Mhz</span>
<a name="l00065"></a>00065   UCA0BR1 = 0x2;
<a name="l00066"></a>00066   UCA0MCTL = UCBRS_3;
<a name="l00067"></a>00067 <span class="preprocessor">#elif (BSP_CONFIG_CLOCK_MHZ_SELECT == 8)</span>
<a name="l00068"></a>00068 <span class="preprocessor"></span>  UCA0BR0 = 0x41;                           <span class="comment">// 9600 from 8Mhz</span>
<a name="l00069"></a>00069   UCA0BR1 = 0x3;
<a name="l00070"></a>00070   UCA0MCTL = UCBRS_2;
<a name="l00071"></a>00071 <span class="preprocessor">#elif (BSP_CONFIG_CLOCK_MHZ_SELECT == 10)</span>
<a name="l00072"></a>00072 <span class="preprocessor"></span>  UCA0BR0 = 0x79;                           <span class="comment">// 9600 from 10Mhz</span>
<a name="l00073"></a>00073   UCA0BR1 = 0x4;
<a name="l00074"></a>00074   UCA0MCTL = UCBRS_7;
<a name="l00075"></a>00075 <span class="preprocessor">#elif (BSP_CONFIG_CLOCK_MHZ_SELECT == 12)</span>
<a name="l00076"></a>00076 <span class="preprocessor"></span>  UCA0BR0 = 0xE2;                           <span class="comment">// 9600 from 12Mhz</span>
<a name="l00077"></a>00077   UCA0BR1 = 0x4;
<a name="l00078"></a>00078   UCA0MCTL = 0;
<a name="l00079"></a>00079 <span class="preprocessor">#elif (BSP_CONFIG_CLOCK_MHZ_SELECT == 16)</span>
<a name="l00080"></a>00080 <span class="preprocessor"></span>  UCA0BR0 = 0x82;                           <span class="comment">// 9600 from 16Mhz</span>
<a name="l00081"></a>00081   UCA0BR1 = 0x6;
<a name="l00082"></a>00082   UCA0MCTL = UCBRS_6;
<a name="l00083"></a>00083 <span class="preprocessor">#else</span>
<a name="l00084"></a>00084 <span class="preprocessor"></span><span class="preprocessor">#error "ERROR: Unsupported clock speed.  Custom clock speeds are possible. See comments in code."</span>
<a name="l00085"></a>00085 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00086"></a>00086 <span class="preprocessor"></span>
<a name="l00087"></a>00087   UCA0CTL1 &amp;= ~UCSWRST;                     <span class="comment">// **Initialize USCI state machine**</span>
<a name="l00088"></a>00088   IE2 |= UCA0RXIE;                          <span class="comment">// Enable USCI_A0 RX interrupt</span>
<a name="l00089"></a>00089   __enable_interrupt();
<a name="l00090"></a>00090 }
<a name="l00091"></a>00091 
<a name="l00092"></a><a class="code" href="virtual__com__cmds_8h.html#ba4582f77689b8665ac6d895d4a3665d">00092</a> <span class="keywordtype">void</span> <a class="code" href="virtual__com__cmds_8c.html#ba4582f77689b8665ac6d895d4a3665d">TXString</a>( <span class="keywordtype">char</span>* string, <span class="keywordtype">int</span> length )
<a name="l00093"></a>00093 {
<a name="l00094"></a>00094   <span class="keywordtype">int</span> pointer;
<a name="l00095"></a>00095   <span class="keywordflow">for</span>( pointer = 0; pointer &lt; length; pointer++)
<a name="l00096"></a>00096   {
<a name="l00097"></a>00097     <span class="keyword">volatile</span> <span class="keywordtype">int</span> i;
<a name="l00098"></a>00098     UCA0TXBUF = string[pointer];
<a name="l00099"></a>00099     <span class="keywordflow">while</span> (!(IFG2&amp;UCA0TXIFG));              <span class="comment">// USCI_A0 TX buffer ready?</span>
<a name="l00100"></a>00100   }
<a name="l00101"></a>00101 }
<a name="l00102"></a>00102 
<a name="l00103"></a><a class="code" href="virtual__com__cmds_8h.html#8941b8fc06d7c761a6d2440cc6cebed1">00103</a> <span class="keywordtype">void</span> <a class="code" href="virtual__com__cmds_8c.html#8941b8fc06d7c761a6d2440cc6cebed1">transmitDataString</a>(<span class="keywordtype">char</span> data_mode, <span class="keywordtype">char</span> addr[4],<span class="keywordtype">char</span> rssi[3], <span class="keywordtype">char</span> msg[<a class="code" href="virtual__com__cmds_8h.html#454319eb4a37e1b856755df2c55de67b">MESSAGE_LENGTH</a>] )
<a name="l00104"></a>00104 {
<a name="l00105"></a>00105   <span class="keywordtype">char</span> temp_string[] = {<span class="stringliteral">" XX.XC"</span>};
<a name="l00106"></a>00106   <span class="keywordtype">int</span> temp = msg[0] + (msg[1]&lt;&lt;8);
<a name="l00107"></a>00107 
<a name="l00108"></a>00108   <span class="keywordflow">if</span>(!(data_mode &amp; degCMode))
<a name="l00109"></a>00109   {
<a name="l00110"></a>00110     temp = (int)(((<span class="keywordtype">float</span>)temp)*1.8)+320;
<a name="l00111"></a>00111     temp_string[5] = <span class="charliteral">'F'</span>;
<a name="l00112"></a>00112   }
<a name="l00113"></a>00113   <span class="keywordflow">if</span>( temp &lt; 0 )
<a name="l00114"></a>00114   {
<a name="l00115"></a>00115     temp_string[0] = <span class="charliteral">'-'</span>;
<a name="l00116"></a>00116     temp = temp * -1;
<a name="l00117"></a>00117   }
<a name="l00118"></a>00118   <span class="keywordflow">else</span> <span class="keywordflow">if</span>( ((temp/1000)%10) != 0 )
<a name="l00119"></a>00119   {
<a name="l00120"></a>00120     temp_string[0] = <span class="charliteral">'0'</span>+((temp/1000)%10);
<a name="l00121"></a>00121   }
<a name="l00122"></a>00122   temp_string[4] = <span class="charliteral">'0'</span>+(temp%10);
<a name="l00123"></a>00123   temp_string[2] = <span class="charliteral">'0'</span>+((temp/10)%10);
<a name="l00124"></a>00124   temp_string[1] = <span class="charliteral">'0'</span>+((temp/100)%10);
<a name="l00125"></a>00125 
<a name="l00126"></a>00126   <span class="keywordflow">if</span>(data_mode &amp; verboseMode)
<a name="l00127"></a>00127   {
<a name="l00128"></a>00128     <span class="keywordtype">char</span> output_verbose[] = {<span class="stringliteral">"\r\nNode:XXXX,Temp:-XX.XC,Battery:X.XV,Strength:XXX%,RE:no "</span>};
<a name="l00129"></a>00129 
<a name="l00130"></a>00130     output_verbose[46] = rssi[2];
<a name="l00131"></a>00131     output_verbose[47] = rssi[1];
<a name="l00132"></a>00132     output_verbose[48] = rssi[0];
<a name="l00133"></a>00133 
<a name="l00134"></a>00134     output_verbose[17] = temp_string[0];
<a name="l00135"></a>00135     output_verbose[18] = temp_string[1];
<a name="l00136"></a>00136     output_verbose[19] = temp_string[2];
<a name="l00137"></a>00137     output_verbose[20] = temp_string[3];
<a name="l00138"></a>00138     output_verbose[21] = temp_string[4];
<a name="l00139"></a>00139     output_verbose[22] = temp_string[5];
<a name="l00140"></a>00140 
<a name="l00141"></a>00141     output_verbose[32] = <span class="charliteral">'0'</span>+(msg[2]/10)%10;
<a name="l00142"></a>00142     output_verbose[34] = <span class="charliteral">'0'</span>+(msg[2]%10);
<a name="l00143"></a>00143     output_verbose[7] = addr[0];
<a name="l00144"></a>00144     output_verbose[8] = addr[1];
<a name="l00145"></a>00145     output_verbose[9] = addr[2];
<a name="l00146"></a>00146     output_verbose[10] = addr[3];
<a name="l00147"></a>00147     <a class="code" href="virtual__com__cmds_8c.html#ba4582f77689b8665ac6d895d4a3665d">TXString</a>(output_verbose, <span class="keyword">sizeof</span> output_verbose );
<a name="l00148"></a>00148   }
<a name="l00149"></a>00149   <span class="keywordflow">else</span>
<a name="l00150"></a>00150   {
<a name="l00151"></a>00151     <span class="keywordtype">char</span> output_short[] = {<span class="stringliteral">"\r\n$ADDR,-XX.XC,V.C,RSI,N#"</span>};
<a name="l00152"></a>00152 
<a name="l00153"></a>00153     output_short[19] = rssi[2];
<a name="l00154"></a>00154     output_short[20] = rssi[1];
<a name="l00155"></a>00155     output_short[21] = rssi[0];
<a name="l00156"></a>00156 
<a name="l00157"></a>00157 
<a name="l00158"></a>00158     output_short[8] = temp_string[0];
<a name="l00159"></a>00159     output_short[9] = temp_string[1];
<a name="l00160"></a>00160     output_short[10] = temp_string[2];
<a name="l00161"></a>00161     output_short[11] = temp_string[3];
<a name="l00162"></a>00162     output_short[12] = temp_string[4];
<a name="l00163"></a>00163     output_short[13] = temp_string[5];
<a name="l00164"></a>00164 
<a name="l00165"></a>00165     output_short[15] = <span class="charliteral">'0'</span>+(msg[2]/10)%10;
<a name="l00166"></a>00166     output_short[17] = <span class="charliteral">'0'</span>+(msg[2]%10);
<a name="l00167"></a>00167     output_short[3] = addr[0];
<a name="l00168"></a>00168     output_short[4] = addr[1];
<a name="l00169"></a>00169     output_short[5] = addr[2];
<a name="l00170"></a>00170     output_short[6] = addr[3];
<a name="l00171"></a>00171     <a class="code" href="virtual__com__cmds_8c.html#ba4582f77689b8665ac6d895d4a3665d">TXString</a>(output_short, <span class="keyword">sizeof</span> output_short );
<a name="l00172"></a>00172   }
<a name="l00173"></a>00173 }
<a name="l00174"></a>00174 
<a name="l00175"></a><a class="code" href="virtual__com__cmds_8h.html#0d4cc479fe9130a76ebbf38987eea8d6">00175</a> <span class="keywordtype">void</span> <a class="code" href="virtual__com__cmds_8c.html#0d4cc479fe9130a76ebbf38987eea8d6">transmitData</a>(<span class="keywordtype">int</span> addr, <span class="keywordtype">signed</span> <span class="keywordtype">char</span> rssi,  <span class="keywordtype">char</span> msg[<a class="code" href="virtual__com__cmds_8h.html#454319eb4a37e1b856755df2c55de67b">MESSAGE_LENGTH</a>] )
<a name="l00176"></a>00176 {
<a name="l00177"></a>00177   <span class="keywordtype">char</span> addrString[4];
<a name="l00178"></a>00178   <span class="keywordtype">char</span> rssiString[3];
<a name="l00179"></a>00179   <span class="keyword">volatile</span> <span class="keywordtype">signed</span> <span class="keywordtype">int</span> rssi_int;
<a name="l00180"></a>00180 
<a name="l00181"></a>00181   addrString[0] = <span class="charliteral">'0'</span>;
<a name="l00182"></a>00182   addrString[1] = <span class="charliteral">'0'</span>;
<a name="l00183"></a>00183   addrString[2] = <span class="charliteral">'0'</span>+(((addr+1)/10)%10);
<a name="l00184"></a>00184   addrString[3] = <span class="charliteral">'0'</span>+((addr+1)%10);
<a name="l00185"></a>00185   rssi_int = (<span class="keywordtype">signed</span> int) rssi;
<a name="l00186"></a>00186   rssi_int = rssi_int+128;
<a name="l00187"></a>00187   rssi_int = (rssi_int*100)/256;
<a name="l00188"></a>00188   rssiString[0] = <span class="charliteral">'0'</span>+(rssi_int%10);
<a name="l00189"></a>00189   rssiString[1] = <span class="charliteral">'0'</span>+((rssi_int/10)%10);
<a name="l00190"></a>00190   rssiString[2] = <span class="charliteral">'0'</span>+((rssi_int/100)%10);
<a name="l00191"></a>00191 
<a name="l00192"></a>00192   <a class="code" href="virtual__com__cmds_8c.html#8941b8fc06d7c761a6d2440cc6cebed1">transmitDataString</a>( degCMode, addrString, rssiString, msg );
<a name="l00193"></a>00193 }
<a name="l00194"></a>00194 
<a name="l00195"></a>00195 <span class="comment">/*------------------------------------------------------------------------------</span>
<a name="l00196"></a>00196 <span class="comment">* USCIA interrupt service routine</span>
<a name="l00197"></a>00197 <span class="comment">------------------------------------------------------------------------------*/</span>
<a name="l00198"></a>00198 <span class="preprocessor">#pragma vector=USCIAB0RX_VECTOR</span>
<a name="l00199"></a><a class="code" href="virtual__com__cmds_8h.html#17f35cde00b55ad99a827c8a83a13682">00199</a> <span class="preprocessor"></span>__interrupt <span class="keywordtype">void</span> <a class="code" href="virtual__com__cmds_8c.html#17f35cde00b55ad99a827c8a83a13682">USCI0RX_ISR</a>(<span class="keywordtype">void</span>)
<a name="l00200"></a>00200 {
<a name="l00201"></a>00201   <span class="keywordtype">char</span> rx = UCA0RXBUF;
<a name="l00202"></a>00202   <span class="keywordflow">if</span> ( rx == <span class="charliteral">'V'</span> || rx == <span class="charliteral">'v'</span> )
<a name="l00203"></a>00203   {
<a name="l00204"></a>00204     verboseMode = 1;
<a name="l00205"></a>00205   }
<a name="l00206"></a>00206   <span class="keywordflow">else</span> <span class="keywordflow">if</span> ( rx == <span class="charliteral">'M'</span> || rx == <span class="charliteral">'m'</span> )
<a name="l00207"></a>00207   {
<a name="l00208"></a>00208     verboseMode = 0;
<a name="l00209"></a>00209   }
<a name="l00210"></a>00210   <span class="keywordflow">else</span> <span class="keywordflow">if</span> ( rx == <span class="charliteral">'F'</span> || rx == <span class="charliteral">'f'</span> )
<a name="l00211"></a>00211   {
<a name="l00212"></a>00212     degCMode = 0;
<a name="l00213"></a>00213   }
<a name="l00214"></a>00214   <span class="keywordflow">else</span> <span class="keywordflow">if</span> ( rx == <span class="charliteral">'C'</span> || rx == <span class="charliteral">'c'</span> )
<a name="l00215"></a>00215   {
<a name="l00216"></a>00216     degCMode = 1;
<a name="l00217"></a>00217   }
<a name="l00218"></a>00218 }
</pre></div><hr size="1"><address style="align: right;"><small>Generated on Thu Mar 29 11:40:05 2012 by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.4.7 </small></address>
</body>
</html>
